{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Despite the precise meaning of the term \loch\af0\hich\af0\dbch\af0\uc1\u8216\'91semantics\u8217\'92 in semantic interoperability, it is clear that sIOP encompasses a communication between at least two actors. This brings a natural responsibility for both actors in the communication, described by [@Grice:1991BT] as the particular purpose of communication, viz. to serve:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 1. Quantity: Make your contributions as informative as is required (for the current purpose of the exchange), and not more than is required;}
\par\plain {\f0\fs24\b0\i0 2. Quality: Do not say what you believe to be false, or for which you lack evidence;}
\par\plain {\f0\fs24\b0\i0 3. Relation: Be relevant (to the immediate needs);}
\par\plain {\f0\fs24\b0\i0 4. Manner: Avoid obscurity of expression, ambiguity, and be brief and orderly.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 This leads to the definition of a design principle to its effect, applying the normative notation from [@Greefhorst2011]:}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-8561\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{mmdp\}[Principle of responsibility for meaning]\\label\{dp:responsibility-for-meaning\}}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 When it is reasonable to expect that the software agent will be engaged in collaboration or otherwise will interoperate with (an)other software agent(s), it is the responsibility of the software architect to serve the quantity, relation and manner of the interoperability by specifying the semantics of the data it produces in advance.   }
\par\pard\plain \ri-8561\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 \\textbf\{Type of information:\} business  \\\\}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Quality attributes:\} semantics, semantic interoperability   \\\\}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Rationale:\}}
\par\plain {\f0\fs24\b0\i0 \\begin\{enumerate\}}
\par\plain {\f0\fs24\b0\i0   \\item Data represent the state of affairs of some part of the world, viewed from a particular perspective of use. Such view is just one particular perspective out of many equally legitimate ones;}
\par\plain {\f0\fs24\b0\i0   \\item Semantic heterogeneity, a direct consequence of the equally legitimate perspectives on reality, should not be considered a bug to resolve, but a feature to preserve and nurture in order to maximise semantic accuracy and relevancy;}
\par\plain {\f0\fs24\b0\i0   \\item Accepting semantic heterogeneity implies the probable uniqueness of the agents view on reality;}
\par\plain {\f0\fs24\b0\i0   \\item Computers are not capable of genuine understanding, hence cannot establish semantics from data and thus require the human-in-the-loop for that;}
\par\plain {\f0\fs24\b0\i0   \\item The responsibility for formulating the semantics that are expressed by the data can only lay by the software architect that has taken the particular perspective on reality when carving out the entities of interest to the software application;}
\par\plain {\f0\fs24\b0\i0   \\item On specifying semantics, Grice\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s maxims on communication, and particularly on serving the quantity, relation and manner of communication, represent the natural constraints to respect;}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0   \\item Without adherence to this principle, the meaning of the data expressed by the software agent can be considered flawed, inaccurate, incomplete or otherwise insufficient in its support for semantic interoperability.}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 \\end\{enumerate\}}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Implications:\}}
\par\plain {\f0\fs24\b0\i0 \\begin\{enumerate\}}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0   \\item The specification of the data semantics is only dependent on the agent\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s own perspective on the application domain, and can therefore be fulfilled before any interoperability with communication peers;}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0   \\item No matter the number of different communication peers, the software agent needs to specify the semantics of its data elements only once;}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0   \\item By providing an explicit semantic specification of the data, an agent facilitates other components and agents to connect to it and further the semantic interoperability.}
\par\plain {\f0\fs24\b0\i0 \\end\{enumerate\}  }
\par\plain {\f0\fs24\b0\i0 \\end\{mmdp\}}
\par\pard\plain \ri-16872\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 We argued in [@Brandt2018a] that since software is incapable of genuine understanding, semantics cannot exist in software. Nevertheless, the software agent acts as transport medium for semantics: for single-user software as the medium that transports the semantics as it was intended by the software engineer to the semantics as it is experienced by the end user at the human-machine interface; for multi-user software as the transport medium for the semantics as intended by one end user at the time of data insertion, to the semantics as experienced by another end user when retrieving the processed data. To act as valid transport medium for semantics, we further stated that the reciprocity between code and data does manifest itself as software semantics. This essential disposition discerns in semantics its *semantic meaning*, i.e., what is said, viz. data, and the *pragmatic meaning*, i.e., to connect with our frame of reference, viz. the code. We explained that by observing that data and code are always tightly coupled and since their reciprocity emerges as software behaviour, software malfunction originates (amongst others) from a broken reciprocity, i.e., inconsistencies between data and code. Consequently, when the data and code are representations of the things and laws in the application domain and, hence, represents semantic meaning and pragmatic meaning, their reciprocity represents the degree with which the collective outcome of processing all potential data refers to the intended states of affairs in reality. Any incoherent reciprocity equates to unfaithfulness: semantics that are considered invalid in the application domain. }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Despite the quality with which the data and the code are developed individually, we can maximise semantic validity by maximising their reciprocity, viz. demanding maximal coherence between code and data. We have called this the *semantic coherence principle*. The consequence of demanding high coherence between the data and its processing code is in its inevitably emerging monolith, which we denoted as the Atomic Semantic Monolith (ASM): a semantic monolith, for it refers to the monolith\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s reciprocity between data and its processing code that describe the affairs in the application domain; Atomicity refers to the level of granularity at which the entity that is referred to by the data token is considered a non-dividable whole in the application domain. Where it is the objective of sIOP to address this monolithic nature of the ASM, as we do in the next section, it is the objective of semantics to maximise and maintain the coherence of the ASM, as elaborated in [ibid.].}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Regarding the quality of the data and code models we reasoned that the data model should have a backward-looking role (in contrast to forward-looking) [@Gonzalez-Perez2007], present an ontological mode of modelling as opposed to a linguistic mode [@Atkinson2003], and demand a strong type-mode (as opposed to a token-mode) that result in non-transitivity and use the kind of abstraction known as classification [@Henderson-Sellers2012]. From those demands, we concluded that for representing semantics ontologies are best suited [@Brandt2018a]. For example, the trueness of forward-looking models, i.e., all 42010:2011 models, is established against their meta-models, while the trueness of backward-looking models, i.e., ontologies, is established through the interpretation in the conceptualisation of reality. }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Based on the responsibility principle in combination with the above three arguments, and supported by considerations in the next section, we defend that software agents that might engage in interoperability, should provide for a semantic bridgehead in the form of an ontology that specifies their data. Such ontology provides the ability to connect to the semantics of the agent in a computational manner, consolidating the semantic concerns for semantic interoperability.}
\par\plain \f0\fs24\b0\i0}