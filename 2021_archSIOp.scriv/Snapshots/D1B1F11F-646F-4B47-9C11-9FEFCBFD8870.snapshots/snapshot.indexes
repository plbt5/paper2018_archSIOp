<?xml version="1.0" encoding="UTF-8"?>
<SnapshotIndexes Version="1.0" BinderUUID="D1B1F11F-646F-4B47-9C11-9FEFCBFD8870">
    <Snapshot Date="2018-04-15 14:46:14 +0200">
        <Title>Untitled Snapshot</Title>
        <Text>Never before, data were so ubiquitous. Never before, a managed access to external, non-native data has been so easy. Unfortunately, *using* that same external, non-native data shows extremely difficult: For a data consuming application, interpreting and using external data requires re-engineering your software to transform that data to fit the model your software applies. For instance, 

This semantic part of interoperability represents a bleeding edge in software development. Its most disconcerting consequences are flat interoperability failures, or seemingly correct but quite invalid data analysis with devastating system behaviour as result. Their correction to valid semantic interoperability (SIOp) always requires a significant time and effort that shows a substantial impediment towards business operations and agility, the next glass ceiling for ICT. This is because current SIOp implementations are essentially based on establishing a convention on the semantics of the terms that are used during the collaboration. Arriving at such conventions, i.e., developing a semantic standard, consumes a very long time that is measured in months at least. Moreover, such convention can be considered a semantic monolith, which makes dealing with external (outside the monolith) data impossible, unless again a time consuming semantic adoption process is initiated. Moreover, with their strong tendency to rely on shared and unified semantics, semantic standards consider semantic heterogeneity a bug as opposed to a feature that is required to achieve semantic accuracy. Nevertheless, this conventions-based approach towards SIOp is accepted folklore in ICT. Due to the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and driven by economical pressure to intensify enterprise collaboration, we consider such approach "too little, too late". Instead, a definitive SIOp capability requires an approach that aims at an *access-and-play* SIOp potential by moving the majority of the effort to achieve SIOp out of the critical path, from redesign time “after the fact” to preparatory design time, viz. design to collaborate. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can realise collaboration in due time, when faced, at some point in their life cycle, with the need to exchange data with other however *unanticipated* software agents outside the semantic monolith. Business agility emerges once you only have to access and play, namely (i) to achieve SIOp in due time, (ii) with data that are generated outside the own semantic monolith.

Access-and-play SIOp demands a notion on semantics, often denoted in layman’s terms as the “understanding of the data”. Despite the used terms *smart* or *intelligent*, e.g., smart watches, or intelligent autonomous systems, computers are inherently stupid. The notion of understanding is completely alien to them. In fact, it is the IT engineer who performs the understanding of data upfront, and implements the proper response to such understanding in program code. The major impediments to the automation for access-and-play SIOp is laid in the nature of semantics itself: The meaning of a term ultimately relates to what it denotes in reality, the so-called term grounding, whilst this relation cannot be deferred from the shape, structure or other characteristics of term itself due to its total arbitrariness. When we acknowledge this semiotic explanation on semantics (on which we elaborate in the next Section), we are confronted with the inevitable separation between languages (software code, modelling languages and natural languages alike) and reality (entities, e.g., things, events and properties of things), also known as the *grounding problem*. In information systems, addressing this fundamental distinction is at best extremely narrow [@Steels:2008tr], or not present at all [@Cregan2007]. Despite the progress of artificial intelligence (AI), its capability to build some form of conscience and gain even a beginning of an understanding to relate a term to what it denotes in reality, also known as "strong AI", does not yet exist and is expected to emerge on the long term only, if ever [@XiuquanLi2017]. Its counterpart "weak AI" with its otherwise highly relevant and important achievements in reasoning, prediction and analysis, is based on machinery that relies on language only and can therefore never make the step to reality on its own [@Scheider:2012tj]. Still, it’s all we’ve got at this very moment and we’ll have to make do with it for the time being in order to achieve semantics and SIOp. We therefore cannot neglect the existence of the grounding problem and its semiotic origins. Nevertheless, we do. For instance, when we are asked to explain how we address the grounding problem in the design of our software agent, we can’t; when we are asked to point at the semantics parts in the code of our software agent, we can't. The same question however about, e.g., its scalability, will render a lecture with adequate references to the underlying architecture. We thus remain at a loss of how to engineer semantics into software agents. However, without a clear understanding on semantics and its contribution to the software agent, we are lacking the bridgehead within the software agent that is fundamental to the semantic interoperability bridge. Hence, the first architectural concern to consider is the nature of semantics in software, and we will address that in the next section. 


Our contributions include:

* 





----

Although technologies such as the Semantic Web and ontologies are available, and despite the principles and practises of the model driven architecture paradigm, no architectural guidance to semantic interoperability exists, neither in terms of architectural principles nor as design practises.

Semantics and semantic interoperability (SIOp) can be considered the next glass ceiling for IT. 

Given the exponential growth in semantic heterogeneity that follows from distributed use of distributed supplied services over distributed resources, information systems are in a desperate need for a managed semantics, which, similar to the principle to store data only once in order to prevent data conflicts, controls the semantic heterogeneity from a central location in your architecture. to an automated SIOp capability to break through this ceiling. information systems are in a desperate need for an automated SIOp capability to break through this ceiling.



</Text>
        <Comments>brandtp, 2018-04-15 Include small example</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 16:03:22 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 21:18:12 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following real world example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that the time source produced `time` as a continuous dimension whilst the Braunschweig Funkuhr interpreted `time` as the instant clock time for that time zone.

In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. The point is that (i) there are so many of these tiny issues, and for each collaboration the same and new ones will surface, and (ii) it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-04-26 09:51:39 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* of the variations upfront the implementation of the conversion.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:43:30 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:

Nation A:

`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`

Nation B:

`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
At the end of April 1993, when Germany went on summer time, the computer clock of a German steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1



In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 23:28:59 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following real world example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that the time source produced `time` as a continuous dimension whilst the Braunschweig Funkuhr interpreted `time` as the instant clock time for that time zone.

In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. The point is that (i) there are so many of these tiny issues, and for each collaboration the same and new ones will surface, and (ii) it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-06-11 13:15:09 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following (allegedly real) example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time instead. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. This tiny difference rooted in the assumption by the steel producer that `time` expressed a continuous scale whilst for the Braunschweig Funkuhr, `time` denoted instant clock time for that time zone and therefore represented a non-continuous scale. In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you. Many such variations exist, leading to a range of faults in so-called *semantic interoperability* (SIOp) and Section/Appendix ## provides for a short overview of SIOp-faults. Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

The most disconcerting consequences of a lack of (automated) SIOp are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions and collaboration-dependent software adaptations. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

In comparison, scalability was a big architectural concern in the past, requiring custom solutions. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Similarly, SIOp can be considered the architectural concern of this decade, and we first need to provide a standardised solution pattern to address semantic concerns, before we can embed it in a technological infrastructure so that SIOp becomes transparent to the developer. Where scalability resulted in a huge increase in performance-demanding applications against a fraction of the original costs and effort, business agility will emerge once the semantic monolith is removed and semantic services exist at the infrastructural level. Then SIOp becomes an access-and-play operation that achieves SIOp in due time with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we explain the shortcomings of the current approach towards software semantics that rely on information models and information views. Instead, we provide for a fundamental notion on the application of ontologies [and ontological commitment] to remedy current semantic shortcomings, and we show [its/their] proper position in the total architecture (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential founded on infrastructural services.

</Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 23:35:38 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following real world example of an interoperability failure.
&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.
Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1
In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that the time source produced `time` as a continuous dimension whilst the Braunschweig Funkuhr interpreted `time` as the instant clock time for that time zone.
In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. The point is that (i) there are so many of these tiny issues, and for each collaboration the same and new ones will surface, and (ii) it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.
So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-10 14:13:50 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:24:27 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:

Nation A:

`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`

Nation B:

`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
At the end of April 1993, when Germany went on summer time, the computer clock of a German steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1



In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 23:39:14 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following real world example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that the time source produced `time` as a continuous dimension whilst the Braunschweig Funkuhr interpreted `time` as the instant clock time for that time zone.

In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. The point is that (i) there are so many of these tiny issues, and for each collaboration the same and new ones will surface, and (ii) it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;

* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);

* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);

* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 21:21:20 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:37:59 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-24 15:00:19 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following (allegedly real) example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that `time` expressed a continuous scale whilst for the Braunschweig Funkuhr, `time` denoted instant clock time for that time zone and therefore represented a non-continuous scale. In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you. Many such variations exist, leading to a range of faults in so-called *semantic interoperability* (SIOp) and Section/Appendix ## provides for a short overview of SIOp-faults. Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do, demanding human intervention.

So we are faced with a lack of automated SIOp. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

In comparison, scalability was a big architectural concern in the past, requiring custom solutions. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Business agility will emerge once you remove the semantic monolith and can embed and hide SIOp in the infrastructure. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:39:48 +0200">
        <Title>Untitled Snapshot</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:

Nation A:

`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`

Nation B:

`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`

In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##).

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-04-23 12:09:38 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* of the variations upfront the implementation of the conversion.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. We reduce the necessary human intervention to complement weak AI to a task that suffices in the context of SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-25 15:33:16 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following (allegedly real) example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time instead. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. This tiny difference rooted in the assumption by the steel producer that `time` expressed a continuous scale whilst for the Braunschweig Funkuhr, `time` denoted instant clock time for that time zone and therefore represented a non-continuous scale. In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you. Many such variations exist, leading to a range of faults in so-called *semantic interoperability* (SIOp) and Section/Appendix ## provides for a short overview of SIOp-faults. Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

The most disconcerting consequences of a lack of automated SIOp are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

In comparison, scalability was a big architectural concern in the past, requiring custom solutions. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Business agility will emerge once you remove the semantic monolith and can embed and hide SIOp in the infrastructure. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1, accessed May 20, 2018</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:40:04 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-14 12:16:09 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
OMG languages typically have abstract syntax (the metamodel), concrete syntax (notations and diagrams) and semantics (constraints and behavior). The MOF is closed in that it is defined in itself. Moreover, although its semantics provide for constraints and behaviour of its models, it does so about the structural aspects of its instances only. Hence, it lacks a formal way that can be used to judge the truth-value of its instances. Interpreting the (informal) semantics of the language, that is, assigning a truth value to an instance, can therefore not rely on an unambiguous  in different ways, resulting in possibly inconsistent and diverging implementations.</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2022-01-27 14:14:58 +0100">
        <Title>Integrating comments Eric dd.2021Feb14</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. But *understanding precedes use*, and understanding the data requires a human-in-the-loop and, therefore, is time-consuming and hampers agility in business collaboration in all domains. For instance, consider the following (allegedly real) example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a safety point of view the decision was made to not rely on their own internal clocks but to use the German *Braunschweig Funkuhr* time radio signal as source for the exact time instead. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller asserted the cooling time had expired, its actions splattered still-molten steel, damaging part of the facility.

In this simple example a tiny difference in the meaning of `time` between the Data Consumer (DC), i.e., steel manufacturer, and the Data Producer (DP), i.e., the Braunschweig Funkuhr, hampered interoperability to the extend of damaging the steel facility. This tiny difference rooted in the assumption by the DC that `time` expressed a continuous scale whilst for the DP, `time` denoted instant clock time for the yearly season, representing a non-continuous scale. In order to achieve that DCs can actually *use* DPs data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you. Many such variations exist, leading to a range of failures in so-called *semantic interoperability* (sIOP). Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do. We accept the need for a human-in-the-loop, but her place in architecture a design choice. Like [@Kuhn2009], as opposed to a philosophical or linguistic subject, we consider semantic interoperability an engineering problem that aims at constraining interpretations towards those that are intended, producing engineering artefacts that can carry sIOP.

The most disconcerting consequences of a lack of (automated) sIOP are time-to-deliver, flat interoperability failures, and as seen above, seemingly correct but quite invalid data analysis results leading to faulty system behaviour. Current sIOP implementations are essentially based on the (time-consuming) process of establishing a shared convention on the semantics of the terms that are exchanged, and require custom software solutions and collaboration-dependent software adaptations. Indeed, such conventions result in a pleasant semantic homogeneity, but also in semantic monoliths. The latter makes dealing with data that originated outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity a bug instead of a feature necessary to achieve semantic accuracy. Nevertheless, this conventions-based approach towards sIOP is considered accepted folklore, even state of the art in ICT, e.g., [@Otto2019]. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". Some form of automation is required to resolve these issues, and we place formal semantics at its core.   

The main objective of our work is to achieve sIOP as quickly as possible, with as minimal effort as possible, for collaborations that had not been foreseen and consequently could not be anticipated for during design time of the (two or more) software agents. Semantic heterogeneity must be allowed for, 

In comparison, scalability was a big architectural concern in the past, requiring custom solutions as well. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Similarly, sIOP can be considered the architectural concern of this decade. We first need to provide standardised solution patterns that address sIOP concerns before we can embed it in a technological infrastructure. Only then we can claim that sIOP becomes transparent to the developer, and only then we can take down the tight coupling between semantics and the syntax of the shared data scheme. Where scalability resulted in a huge increase in performance-demanding applications against a fraction of the original costs and effort, business agility will emerge once their semantics are accessible and semantic services exist at the infrastructural level to adress them. Then sIOP becomes an access-and-play operation that can be achieved in due time with data not anticipated for during software design, and at any point in their life cycle. Metaphorically speaking, we consider sIOP a bridge overarching a semantic gap: with *anchorages* (local semantics according to [@Brandt2018a]) on each side of the gap, with a *spanning* (semantic alignments) resting on them to structurally (semantically) support the interoperability bridge, and with a *roadway* (syntactic transcriptions) enabling the crossing of the (data) traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular semantic gap. This has been depicted in \cref{fig:semantic-concerns}.
\begin{figure}
  \centering
  \begin{subfigure}[b]{.75\textwidth}
    \centering
    \includegraphics[width=\textwidth]{src/images/3SemanticConcerns.png}
    \caption{}
    \label{fig:concernsa}
  \end{subfigure}
  \hfill
  \begin{subfigure}[b]{.15\textwidth}
    \centering
    \includegraphics[width=\textwidth]{src/images/3ConcernsLegend.png}
    \caption{}
    \label{fig:concernsb}
  \end{subfigure}
  \caption{Conceptual overview of the relationships in sIOP between the anchorage (conceptual modelling), its spanning 
(semantic reconciliation) and roadway (semantic mediation), (a), and a legend explaining the used constructs (b).}
  \label{fig:semantic-concerns}
\end{figure}
Our contributions to consolidating semantic interoperability in software architectures are fivefold, represented as architectural principles and concerns as follows:

* Semantic concerns (anchorage): We summarize our work in [@Brandt2018a] on how to achieve a semantic anchorage by abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact. This creates the potential to connect to it, to make comparisons with the semantic artifact of the peer software agent. We then formulate the principle of assuming responsibility on the semantics on data, and conclude what preparations about semantics are required for an agent before being able to engage in semantic interoperability (\cref{anchorage-semantic-concerns});
* sIOP concerns (spanning): Since computers remain incapable of true understanding, sIOP remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement formal semantics to a task that suffices to achieve sIOP, viz. authoring semantic alignments only (\cref{spanning-siop-concerns});
* Mediation concerns (roadway): We determine the demands for a generic component that allows for communication with the peer agent in one’s native vocabulary only, by considering both ontological models and the alignment. Such approach applies the principle *connectivity without dependency* at the semantic level. This consolidates the agent’s potential to collaborate to any unforeseen applications without the need to adopt external semantic definitions, and remain scalable in the process (\cref{roadway-mediation-concerns});
* *Evaluation of semantic principles*: In order to consistently address the above concerns, their founding architectural principles have been derived. It is a matter of architectural hygiene to evaluate how these principles support and consolidate the fundamental architectural demands about loose coupling and separation of concerns (notably semantics and communication concerns). We show how the necessary characteristics of semantics, i.e., semantic heterogeneity, semantic evolution and semantic scalability, are supplied by them (\cref{evaluation-of-siop-principles});
* ISO42010 Architecture Viewpoint: We verify the applicability of the above concerns and principles by formulating their architectural consequences as a specific ISO42010 sIOP Viewpoint that must consolidate their proper position in the total architecture as corresponding sIOP view. As ISO42010 is considered a set of best practises for architecture description, and therefore is used with architecture frameworks such as MoDAF, TOGAF, DoDAF, RM-ODP and more, we conclude that application of this sIOP Viewpoint to formulate the sIOP View can be considered to consolidate sIOP for contemporary architectural paradigms (\cref{iso42010-viewpoint-on-siop}).


This could imply just another day in the office, because for ICT architects and software engineers, refactoring the software agent in order to separate distinct functionality into a new, valuable component is one of their core skills. Application of architectural principles bring about the new component, including an API and standard for its access and use. Its adoption by IEEE, W3C, or a governing domain organisation suffices for its integration at the right infrastructural level. Quod non est for semantics, at least not that simple. “The successful standardisation of protocols made us believe that we should also standardise meaning on the Web. This is a fundamental misconception.” [@Janowicz:2013ui]. Because, this is the first time in the history of ICT that its discipline, viz. we the ICT community, are not speaking about a concern that belongs to the realm of information and communication technology but to that of the users instead. Consequently, we cannot control it, hence the existence of semantic heterogeneity: how users represent what they mean and what is meant with what is represented, differs between every so many stakeholders. Despite this observation, current viewpoints on semantics defy semantic heterogeneity and strive for semantic homogeneity: one single agreed domain convention on how the syntactic representation and structure of the data or messages shall be semantically interpreted. Despite our, the ICT community, acceptance that semantics is a representation of some part of the world, viewed from a particular perspective of use, we don’t acknowledge that this particular representation and particular perspective is fundamental to the domain users when building semantics and getting an understanding. And equally important, we don’t acknowledge that this particular perspective is just one out of many equally legitimate ones that our software are deemed to consider over the software’s lifecycle. Some examples are given in \cref{tab:perspectives}.

-------------------------------------------------------------------------------------------------------------------
Reality to refer to          Perspective #1      Perspective #2       Perspective #3        ...  Perspective #n              
---------------------------- ------------------- -------------------- -------------------- ----- ------------------
Waves are                    *objects* that      *forces* exerted on  an *accumulation* of  ...  a *relation*      
                             I can point at      dikes, walls or      other waves                between water, 
                                                 oil rigs                                        current, wind and
                                                                                                 the seabed

$\;$

How many terrorist attacks   1, the number       2, the number        4, the number         ...  2996, the
can be counted on 9/11?      of involved         of collapsed         of involved                number of
                             terrorist groups    towers               aircraft                   casualties[^1] 

-------------------------------------------------------------------------------------------------------------------

   : Semantics follows many alternative but equally legitimate points of view on reality, implying that no single one true representation exists. Hence, semantic heterogeneity is a feature that should be preserved, as opposed to a bug that should be sought to correct. \label{tab:perspectives}

We consider semantic homogeneity not only an illusion, but striving for it brings about several important disadvantages. For instance, implementation of semantic standards involves considerable expenses, and tends to solidify in software by implicit operations on data. Moreover, since semantic standards fix representation, semantics becomes conflated with syntax, making the semantic standard dependent upon variations in syntax and, hence, the architectural paradigm, its implementation or applied technology. Together, this brings about a high impedance to change or evolution, which creates a significant barrier for new business opportunities, obstructing business agility. Finally, it is sheer impossible to create for each particular domain, or part thereof, a semantic standard; even in the highly protocolised health domain that already addressed semantics in 1987 [@Spronk2014], adoption of a standard remains slow and cumbersome [REF]. This becomes all the more clear when comparing with the successful adoption of 2G GSM telecommunication standard, including its evolution to 2.5G, 3G, 3.5G, 4G and 5G standards during roughly the same era. 

By separating syntactical from semantic concerns and turning semiotic fundamentals into architectural principles, loosely coupled formal semantics emerges and can be consolidated in contemporary architectural paradigms. From that position embedding standard semantic services into the communication infrastructure remains domain-independent; hence, for us, the ICT-discipline, its standardisation can be considered yet another day in the office again. We first describe some background on the semantic foundations in the following section.



&lt;!-- Page additions --&gt;

[^1]: as mentioned by Wikipedia, https://en.wikipedia.org/wiki/Casualties_of_the_September_11_attacks, accessed Dec 13, 2018

</Text>
        <Comments>brandtp, 22-6-2020 Was a contribution of our previous work. Mention that we summarize our work here.
Source: http://catless.ncl.ac.uk/Risks/14/57#subj1, accessed May 20, 2018</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 15:29:05 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-04-23 10:44:15 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
This example shows that an identifier for a company, `DX-2004/84492`, is considered by nation B a simple label, pointed by relationship `hasKvkNummer` and belonging to the class `MaatschappelijkeActiviteit`. The class denotes the company, which can be considered equivalent to the class `RegisteredOrganisation` from nation A. However, nation A considers the company identifier a class in its own right, `CompanyCode`, with a particular `hasNotation` relation to its value. In this simple example we already see two characteristics that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complicating characteristic would be the use of different measures of unit. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section ##. 
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Alignment concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. We reduce the necessary human intervention to complement weak AI to a task that suffices in the context of SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-23 21:18:32 +0200">
        <Title>Untitled Snapshot</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
</Text>
    </Snapshot>
    <Snapshot Date="2018-05-22 23:13:22 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider two nations each of which registers a company, as follows:
Nation A:
`RegisteredOrganisation ---hasCompanyCode--&gt; `
`           CompanyCode ---hasNotation--&gt; “DX-2004/84492”`
Nation B:
`MaatschappelijkeActiviteit ---hasKvkNummer--&gt; “DX-2004/84492”`
In this simple example we already see two issues that hamper interoperability between the nations. Firstly, use of different terms for equivalent things, and secondly, application of different structures to express equivalent things. When the values had denoted a magnitude as opposed to the current identifier, e.g., a temperature, a third complication would be the use of different measures of unit. In order to achieve that both nations can actually *use* their peers data, we need to design and implement wrappers that convert between the variations in terms, structures and units; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. It is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.
So, lack of automated SIOp represents the next glass ceiling for ICT. The most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 
Current SIOp implementations are essentially based on the (time-consuming) process of establishing a convention on the semantics of the terms that are exchanged during collaboration. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 
Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:
* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;
* Semantic concerns (bridgehead): Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and include this as a separate artifact contributing to the software agent. We show how such explicit notion on semantics fits with other architectural components (Section ##);
* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);
* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);
Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.
OMG languages typically have abstract syntax (the metamodel), concrete syntax (notations and diagrams) and semantics (constraints and behavior). The MOF is closed in that it is defined in itself. Moreover, although its semantics provide for constraints and behaviour of its models, it does so about the structural aspects of its instances only. Hence, it lacks a formal way that can be used to judge the truth-value of its instances. Interpreting the (informal) semantics of the language, that is, assigning a truth value to an instance, can therefore not rely on an unambiguous  in different ways, resulting in possibly inconsistent and diverging implementations.
</Text>
        <Comments>brandtp, 2018-04-20 This is a typical TOOP example that unfortunately expresses a more structural than clear semantic issues. Improve on it?</Comments>
    </Snapshot>
    <Snapshot Date="2018-05-24 11:05:08 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following real world example of an interoperability failure.

&gt; A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a security point of view the decision was made to not rely on their own internal clocks but instead, to use the *Braunschweig Funkuhr* (German time radio signal) as source for the exact time. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the facility.

Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1

In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. The tiny difference was the assumption by the steel producer that the time source produced `time` as a continuous dimension whilst the Braunschweig Funkuhr interpreted `time` as the instant clock time for that time zone.

In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you; not once, but *for every element in the data scheme*. Many such *semantic interoperability* (SIOp) issues exist, and a short overview is given in Section/Appendix ##. The point is that (i) there are so many of these tiny issues, and for each collaboration the same and new ones will surface, and (ii) it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.

In comparison, scalability was a big architectural concern in the past, requiring custom solutions; it was then standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. We now stand for a similar, but completely different situation. It is similar, because, while it currently requires custom solutions, the ultimate goal of semantic interoperability is its disappearance into the infrastructure. It is completely different, because unlike scalability we are not addressing a human-invented technological concern over which we have complete control. For the first time in ICT we are entering the realm of reality for which, even after several thousands of years of philosophical debate, no unified view can be given. Does a lake continue *to be a lake*, even when all its water have been vaporised in summer? How many tragic *events* does 9-11 represent, one, three or thousands? Even the most crucial semantic definitions that we have developed, i.e., the law, requires resolutions of the many disputes about its applicability in so many different situations.

So, SIOp requires human intervention. Its most disconcerting consequences are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to devastating system behaviour. 

Current SIOp implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards SIOp is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". 

Business agility will emerge once you remove the semantic monolith. Then, you only have to access-and-play, namely (i) achieve SIOp in due time (ii) with all external data. In this way, software systems, applications or software components -- henceforth collectively denoted as software agents -- can quickly realise collaboration, also with data not anticipated for during software design, at any point in their life cycle. Metaphorically speaking, we consider access-and-play SIOp as a bridge overarching a (semantic) gap: with *bridgeheads* on each side of the gap, with a *spanning* resting on them to structurally support the bridge and its traffic, and with a *roadway* enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fourfold, and represented as architectural principles and concerns, as follows:

* Principles: We base SIOp on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (Section ##), and show how these principles can be operationalised;

* Semantic concerns (bridgehead): Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we provide for a fundamental notion on software semantics and we show how such explicit notion on semantics fits with other architectural components (Section ##);

* Weak AI concerns (spanning): Since “strong AI” does not yet exist, SIOp remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve SIOp, viz. authoring semantic alignments only (Section ##);

* Mediation concerns (roadway): We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (Section ##);

Based on these contributions we [argue/defend] that a definitive SIOp should aim at an access-and-play potential as upfront “design to collaborate”.

</Text>
        <Comments>Source: http://catless.ncl.ac.uk/Risks/14.57.html#subj1, accessed May 20, 2018</Comments>
    </Snapshot>
</SnapshotIndexes>