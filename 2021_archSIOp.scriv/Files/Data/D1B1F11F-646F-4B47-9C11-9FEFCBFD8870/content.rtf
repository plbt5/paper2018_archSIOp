{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 Never before, data were so ubiquitous, and managed access to external data was so easy. But *understanding precedes use*, and understanding the data requires a human-in-the-loop. Therefore, semantic interoperability (sIOP) is time-consuming and hampers agility in business collaboration in all domains. The most disconcerting consequences of a lack of (automated) sIOP are time-to-deliver, flat interoperability failures, and seemingly correct but quite invalid data comprehension that leads to faulty system behaviour. For instance, consider the following (allegedly real) example of an interoperability failure.\
\
> A German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, from a safety point of view the decision was made to not rely on their own internal clocks but to use the German *Braunschweig Funkuhr* time radio signal as source for the exact time instead. At the end of April 1993, when Germany went on summer time, the computer clock of the steel producer went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller asserted the cooling time had expired, its actions splattered still-molten steel, damaging part of the {\field{\*\fldinst{HYPERLINK "scrivcmt://A8AB84D2-8C28-4923-8516-C57012DCFBB7"}}{\fldrslt facility.}}\
\
In this simple example a tiny difference in the meaning of `time` between the Data Service Consumer (DSC), i.e., steel manufacturer, and the Data Service Producer (DSP), i.e., the Braunschweig Funkuhr, hampered interoperability to the extend of damaging the steel facility. This tiny difference rooted in the assumption by the DSC that `time` expressed a continuum whilst for the DSP, `time` denoted instant clock time for the yearly season, allowing seasonal discontinuities. Data represents a certain state of affairs (SoA) in the domain of application (DoA), and the purpose of sIOP is to communicate that SoA such that the DSC can act on it. Unfortunately, between the DSP and the DSC variations may exist in terms, structures, dimensions and other background knowledge about the exchanged data. Consequentially, one datum might refer to two different SoAs, deceiving the DSC about its perceived SoA, leading to conclusions that cannot be substantiated in the DoA and, subsequently, to incorrect behaviour. In order to achieve that DSCs can correctly *use* DSPs\'92 data, the need exists to design and implement wrappers that restores any differences in SoAs that emerge from the data. Many such variations exist, leading to a range of failures in sIOP. Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do. When we accept the need for a human-in-the-loop, her place in architecture becomes a design choice. Like [@Kuhn2009], and as opposed to a philosophical or linguistic problem, we consider semantic interoperability an engineering problem that aims at constraining interpretations towards those that are intended, producing engineering artefacts that can carry sIOP.\
\
Current sIOP implementations are essentially based on the (time-consuming) process of establishing a shared convention on the semantics of the data that are exchanged, and require custom software solutions and collaboration-dependent software adaptations. Indeed, such conventions result in a pleasant semantic homogeneity, but also in huge semantic monoliths that resolve some but far from all interoperability problems [@Renner1996]. And it makes dealing with data that originated outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity a bug instead of a feature necessary to allow for different but equally valid perspectives and to achieve semantic accuracy. Nevertheless, this conventions-based approach towards sIOP is considered accepted folklore, even state of the art in ICT, e.g., [@Otto2019]. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach insufficient. Automation is required to resolve these issues, and we place formal semantics at its core.\
\
The main objective of our work is to achieve sIOP as quickly as possible, with as minimal human effort as possible, for collaborations that had not been foreseen and consequently could not be anticipated for during design time of the (two or more) software agents. Semantic heterogeneity must be allowed for, semantic scalability must become possible. We categorise our work in terms of the Framework for Enterprise Interoperability (FEI) [@Chen2017] as addressing the 
\f1 <$Scr_Cs::1>
\f2\i conceptual
\f1\i0 <!$Scr_Cs::1>
\f0  barrier, investigating the 
\f1 <$Scr_Cs::1>
\f2\i data
\f1\i0 <!$Scr_Cs::1>
\f0  and 
\f1 <$Scr_Cs::1>
\f2\i process
\f1\i0 <!$Scr_Cs::1>
\f0  concerns, and applying a 
\f1 <$Scr_Cs::1>
\f2\i federated
\f1\i0 <!$Scr_Cs::1>
\f0  approach.\
\
In comparison, system scalability was a big architectural concern in the past, requiring custom solutions as well. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Similarly, sIOP can be considered the architectural concern of this decade. We first need to provide standardised solution patterns that address sIOP concerns before we can embed it in a technological infrastructure. Only then we can claim that sIOP becomes transparent to the developer, and only then we can take down the tight coupling between semantics and the syntax of the shared data scheme. Where system scalability resulted in a huge increase in performance-demanding applications against a fraction of the original costs and effort, business agility will emerge once their semantics are accessible and semantic services exist at the infrastructural level to address them. Then sIOP becomes an access-and-play operation that can be achieved in due time with data not anticipated for during software design, and at any point in their life cycle. Metaphorically speaking, we consider sIOP a 
\f2\i bridge
\f0\i0  overarching a semantic gap: with *anchorages* (local, tangible semantics according to [@Brandt2021a]) on each side of the gap, with a *spanning* (semantic alignments) resting on them to structurally (semantically) support the interoperability bridge, and with a *roadway* (syntactic transcriptions) enabling the crossing of the (data) traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular semantic gap. This has been depicted in \\cref\{fig:semantic-concerns\}.\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\pardeftab720\sl288\slmult1\partightenfactor0

\f1 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f0 \\begin\{figure\}\
  \\centering\
  \\subcaptionbox\{\\label\{\AppleTypeServicesU0 fig:concernsa\AppleTypeServicesU1 \}\}\
    [\AppleTypeServicesU0 .75\\textwidth]\AppleTypeServicesU1 \{\\includegraphics\{\AppleTypeServicesU0 src/images/3SemanticConcerns\AppleTypeServicesU1 \}\}\
  \\hfill\
  \\subcaptionbox\{\\label\{\AppleTypeServicesU0 fig:concernsb\AppleTypeServicesU1 \}\}\
    [\AppleTypeServicesU0 .15\\textwidth]\AppleTypeServicesU1 \{\\includegraphics\{src/images/\AppleTypeServicesU0 3ConcernsLegend\AppleTypeServicesU1 \}\}\
  \\caption\{{\field{\*\fldinst{HYPERLINK "scrivcmt://491F3766-5B58-4884-AF2C-E5666DD15451"}}{\fldrslt \AppleTypeServicesU0 Conceptual overview}}\AppleTypeServicesU0  of the relationships in sIOP between the anchorage (conceptual modelling), its spanning (semantic reconciliation) and roadway (semantic mediation), (a), and a legend explaining the used constructs (b).\AppleTypeServicesU1 \}\\label\{\AppleTypeServicesU0 fig:semantic-concerns\AppleTypeServicesU1 \}\
\\end\{figure\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \AppleTypeServicesU0 <!$Scr_Ps::0>
\f0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 Our contributions to consolidating semantic interoperability in software architectures are fivefold, represented as architectural principles and concerns as follows:\
\
* 
\f2\i Semantic concerns (anchorage)
\f0\i0 : We summarize our work in [@Brandt2021a] on how to achieve a semantic anchorage by a{\field{\*\fldinst{HYPERLINK "scrivcmt://BD2B330C-15A1-42B2-BD43-842247FC5659"}}{\fldrslt bstracting semantics}} from a tacit software implication into a tangible, computational and distinct artifact. This creates the potential to connect to it, to make comparisons with the semantic artifact of the peer software agent. We then formulate the principle of assuming responsibility on the semantics on data, and conclude what preparations about semantics are required for an agent before being able to engage in semantic interoperability (\\cref\{anchorage-semantic-concerns\});\
* 
\f2\i sIOP concerns (spanning)
\f0\i0 : Since computers remain incapable of true understanding, sIOP remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We establish principles to minimise human intervention to a level that suffices to achieve sIOP, viz authoring semantic alignments only (\\cref\{spanning-siop-concerns\});\
* 
\f2\i Mediation concerns (roadway)
\f0\i0 : We determine the demands for a generic component that allows for communication with the peer agent in one\'92s own native vocabulary only, by considering both ontological models and the alignment. Such approach applies the principle *connectivity without dependency* at the semantic level. This consolidates the agent\'92s potential to collaborate to any unforeseen applications without the need to adopt external semantic definitions, and remain scalable in the process (\\cref\{roadway-mediation-concerns\});\
* 
\f1 <$Scr_Cs::1>
\f2\i Evaluation of semantic principles
\f1\i0 <!$Scr_Cs::1>
\f0 : It is a matter of architectural hygiene to evaluate how the derived principles support and consolidate the fundamental architectural demands about loose coupling and separation of concerns (notably semantic and communication concerns). We show how the necessary characteristics of semantics, i.e., semantic heterogeneity, semantic evolution and semantic scalability, are supplied by them (\\cref\{evaluation-of-siop-principles\});\
* 
\f2\i ISO42010 Architecture Viewpoint
\f0\i0 : We verify the applicability of the above concerns and principles by formulating their architectural consequences as a specific ISO42010 sIOP Viewpoint that must consolidate their proper position in the total architecture as corresponding sIOP view. As ISO42010 is considered a set of best practises for architecture description, and therefore is used with architecture frameworks such as MoDAF, TOGAF, DoDAF, RM-ODP and more, we conclude that application of this sIOP Viewpoint to formulate the sIOP View can be considered to consolidate sIOP for contemporary architectural paradigms (\\cref\{iso42010-viewpoint-on-siop\}).\
\
The European Interoperability Framework (EIF)[@EuropeanCommissionDGInformatics-ISA2Programme2017] and the European Interoperability Reference Architecture (EIRA) [@EuropeanCommissionDGInformatics-ISA2Programme2019] address sIOP and recommend the separation of syntactical from semantic concerns. Indeed, a valid recommendation that we support. In itself, though, it renders insufficient as to the practice of how to achieve such separation. We consider this article a principled approach to that practice. It is our intention with this paper to open the discussion on how to surface domain-independent and standard semantic services and API\'92s that can be adopted to become embedded into the communication infrastructure. \
\
\pard\pardeftab720\ri-16974\partightenfactor0
\cf0 In \\cref\{anchorage-semantic-concerns,spanning-siop-concerns,roadway-mediation-concerns,evaluation-of-siop-principles\} we derive ## Design Principles (DPs) to consolidate the three architectural concerns. We define them collectively as \\cref\{tab:dps\} at the end of the paper, following the structure in [@Greefhorst2011].\
\pard\pardeftab720\partightenfactor0
\cf0 \
<!-- Page additions -->\
\
[^1]: as mentioned by Wikipedia, https://en.wikipedia.org/wiki/Casualties_of_the_September_11_attacks, accessed Dec 13, 2018\
\
}