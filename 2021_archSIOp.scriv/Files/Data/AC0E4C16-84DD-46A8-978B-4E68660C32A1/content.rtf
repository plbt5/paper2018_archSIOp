{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\sl288\slmult1\partightenfactor0

\f0\fs24 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f1 # Standard Scrivener+Pandoc Project YAML metadata\
# IMPORTANT: YAML configuration files use SPACES for indentation to define structure, remember to straighten any smart quotes, and don't capitalise metadata keys like "author" or "title", they must be lowercase!\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\sl288\slmult1\partightenfactor0
\cf0 \AppleTypeServicesU0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\sl288\slmult1\partightenfactor0
\cf0 \AppleTypeServicesU1 # Select which templates pandocomatic will use\
# you can enter overrides to the templates here as well\
pandocomatic_:\
  use-template:\
    - elsevier  \
  preprocessors:\
    - preprocessors/preludeGitVersion.py\
title: "<$projecttitle>"\AppleTypeServicesU0 \
\AppleTypeServicesU1 author:\
  - name: Paul Brandt\
    orcid: 0000-0002-2353-967X  \
    affiliation: 1\
    correspondence: p.brandt@tue.nl \
  - name: Eric Grandry\
    orcid: 0000-0003-3553-8460  \
    affiliation: 2\
    email: egrandry@gmail.com  \
  - name: Marten van Sinderen   \
    orcid: 0000-0001-7118-1353  \
    affiliation: 4        \
    email: m.j.vansinderen@utwente.nl   \
  - name: Twan Basten     \
    orcid: 0000-0002-2274-7274  \
    affiliation: [1,3]  \
    email: a.a.basten@tue.nl  \
institute:\
  - 1: Eindhoven University of Technology (TU/e), Eindhoven, The Netherlands\
  - 2: Ministry of Mobility and Public Works, Luxembourg, Luxembourg\
  - 4: University of Twente (UT), Enschede, The Netherlands\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\sl288\slmult1\partightenfactor0
\cf0 \AppleTypeServicesU0   - 3: ESI (TNO), Eindhoven, The Netherlands\AppleTypeServicesU1 \
keywords:\
  - semantic interoperability\
  - software architectures\
  - semantics\
  - interoperability\
  - design principles\
journalname: Information and Software Technology  \
\AppleTypeServicesU0 version-incr: commit # major, minor or commit\AppleTypeServicesU1 \
compiled: <$shortdate>\
date: <$fulldate>\
ack: P.B. would like to acknowledge H.Dominicus for her editorial efforts and M.Bik for leading the project.\
abstract: |   \
  \
\AppleTypeServicesU0   *Background:* Absence of access-and-play semantic interoperability (sIOP) is a big hurdle to contemporary IT-based business collaboration. Despite achievements on sIOP, standardising domain semantics experiences challenges in time-to-market, evolution, and scalability in environments where significant semantic variety exists. Progress towards a universal infrastructural support for sIOP remains hampered by solutions that focus on the local domain only. {\field{\*\fldinst{HYPERLINK "scrivcmt://C56F3642-FA2A-481F-BDE0-4B2FFF039914"}}{\fldrslt Real-world semantics in software are necessarily reduced to the reciprocity between data and data processing.}} Data exchange breaks that reciprocity, failing sIOP. sIOP demands re-establishing a valid reciprocity between the consumer agent\'92s data processing and the producer agent\'92s data, without dependency on semantic standards. For access-and-play sIOP, the effort of the human-in-the-loop has to be reduced. This is a matter of software architecture.       \
  \
  *Objective:* The objective of our study is to identify and formulate the fundamental demands on sIOP, to derive its supporting architectural principles, and their embedding in contemporary architectures.    \
  \
  *Method:* We assess the problems and identify requirements on sIOP, two of which demanding a human-in-the-loop. We develop design principles for interoperability between the agents\'92 semantics. We evaluate these principles by designing an ISO-42010 Architecture Viewpoint and View on sIOP.   \
  \
  *Results:* We show that loosely coupled semantics, semantic alignments, and accountability about the applied ontological commitment are the cornerstones to sIOP. {\field{\*\fldinst{HYPERLINK "scrivcmt://67ABD99B-CD7C-4C8B-9DDD-70988C0CA1FB"}}{\fldrslt The supporting principles are}}: taking responsibility for your data semantics; an explicit ontological commitment; separating semantics from communication; aligning internal and external semantics of exchanged data; and, encapsulating how agents exchange semantics. The resulting Architecture Viewpoint on sIOP, including semantic mediation, consolidates sIOP in contemporary architectural paradigms.  \
  \
  *Conclusions:* Our principles address architectural shortcomings for an access-and-play sIOP capability. Conditions supporting sIOP have to be realised in advance of the data exchange, resulting in loosely coupled semantics that are re-usable for different business collaborations, even those that are not anticipated for. This paper intends to support research into domain-independent standardised semantic services and APIs, to be adopted and embedded into the communication infrastructure.   \
  \

\f0 <!$Scr_Ps::0>}