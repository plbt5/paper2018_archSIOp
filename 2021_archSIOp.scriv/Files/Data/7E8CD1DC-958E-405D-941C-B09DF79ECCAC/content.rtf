{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 We take the position that weak AI is essentially a token-based machine without the ability to close the gap between token and reality. This 
\f1\i Grounding Problem
\f0\i0  [@Harnad1990], a fundamental issue in software engineering about semantics, is hardly addressed [@Steels:2008tr], if at all [@Cregan2007]. This implies that the semiotic triangle is denied its conceptualisation vertex, and the sign remains incomplete. This is confirmed by the software engineering discipline, since it consistently speaks of \'91models that represent reality\'92 in a certain purposeful context 
\f1\i without
\f0\i0  factoring the conceptualisation into the equation [@A\'dfmann2006]. The first consequence is that the edges about abstraction and subjectivation remain vague or necessarily conflate on the relationship between the model and reality, depicted in \\cref\{fig:software-models-reality\}. The next consequence is that the sign becomes \'93beheaded\'94, cutting-off our \'93knowledge about our given remark or doctrine\'94 [@Quine:1953er], making it impossible to perform semeiosis anymore. Yet, we make do with weak AI and therefore with this beheaded sign necessarily, and must conclude that genuine semantics can not ever exist in current software agents.  \
\
\pard\pardeftab720\ri-16872\partightenfactor0
\cf0 ![Software engineering applies a beheaded semiotic triangle in which its edges remain vague or conflate in the single relation between model and reality.][def:softmodelsreal]\
\
\pard\pardeftab720\partightenfactor0
\cf0 Using current software, the human end user at the human-machine interface performs the semeiosis by interpreting the tokens that are displayed (subjectivation). Developing current software, the human software engineer performs the semeiosis and all models are representations of this engineer\'92s conceptualisations. We will focus on two of the typically generated models, the paired models that constitute the engineers' semantics: the {\field{\*\fldinst{HYPERLINK "scrivcmt://C4387A10-A79E-4C0A-9399-864D8A622782"}}{\fldrslt information or data models}} that refer to the *information entities* in reality, paired with the {\field{\*\fldinst{HYPERLINK "scrivcmt://555DAEC1-F737-4AC3-8106-1797C917D453"}}{\fldrslt process or business models}} that represent the *process entities* that operate on the information entities. These models are just tokens that follow specific language grammars: a representation of its quintessence, viz a run-time notion on the proper way to operate on the data. Semantics exist only by grace of the designer (at the modelling level) and the end user (during operations). However, when the humans has left the building, the capability to verify the semantic coherence between the code and the data is lost. Yet, the reciprocity between data and software code determines the semantic validity of the data processing: the (value of) data influence the behaviour of the software code, whereas the way how the software code acts on the data influences how they refer to reality. For instance, consider a data token $T_d$ with value $`40.3`$ to represent temperature, and a data process token $T_p$ to establish fever, e.g., `t > 37.0` $\\to$ `fever`. The one and only means to keep the software from failing is that both the data and the process (i) are expressed in the same unit of dimension ($\\si\{\\degree\}C$ in this example), apply the same (ii) resolution and (iii) accuracy, to name a few obvious constraints. We, therefore, take the stance that semantics can only exist in software by virtue of the semeiosis by the human-in-the-loop, while in the software agent itself semantics are necessarily reduced to the reciprocity between data and software code. Still, the software agent acts as transport medium for the semantics as it was intended by the software engineer to the semantics as it is experienced by the end user at the human-machine interface. We therefore consider the coherence between data models and data processing models essential for enforcing the software agent to maintain a semantic valid reciprocity between binary code and the data it operates on. We reflect this essential disposition with a definition and design principle.  \
\
\\begin\{mmdef\}[Atomic semantic monolith]\\label\{def:atomic-semantic-monolith\}\
An Atomic Semantic Monolith (ASM) denotes a \\emph\{computational\} pair of tokens, $\\pair\{T_d, T_p\}$, that represents the reciprocity between data and software code as a reduced form of semantics, and refers to the intended state of affairs in reality, indicated by \\cite\{Grice:1991BT\} as a twofold:\
\\begin\{itemize\}\
  \\item $T_d$, the data token, which carries the \\emph\{semantic\} meaning, or \'93what is said\'94;\
  \\item $T_p$, the process token, which carries the \\emph\{pragmatic\} meaning, what we like to understand as \'93how it relates to our intentions\'94. \
\\end\{itemize\}\
Reciprocity denotes the degree with which the collective outcome of processing all potential data tokens by the process token refers to the intended states of affairs in reality. Atomicity refers to the level of granularity of the data token that refers to entities that are considered a non-dividable whole. \
\\end\{mmdef\}\
\
\
This leads to the definition of a design principle to its effect; we apply the normative notation from [@Greefhorst2011]):\
\pard\pardeftab720\ri-8561\partightenfactor0
\cf0 \
\\begin\{mmdp\}[Semantic coherence principle]\\label\{dp:semantic-coherence-principle\}\
\
\pard\pardeftab720\partightenfactor0
\cf0 Establish explicit coherence between the models that are contained in a semantic monolith.\
\pard\pardeftab720\ri-8561\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \\textbf\{Type of information:\} business\
\
\\textbf\{Quality attributes:\} (semantic) accuracy, reusability, manageability, understandability \
\
\\textbf\{Rationale:\}\
\\begin\{enumerate\}\
  \\item Semantics in software agents are necessarily reduced to, and emerge from, the reciprocity between the data and the software code that operates on them;  \
  \\item The software agent cannot guarantee to maintain the aforementioned reciprocity without:\
  \\begin\{enumerate\}\
    \\item explicitly addressing \\textbf\{all\} facets that influence the coherence between the data and the operations that apply on them;\
    \\item representing these facets in a computational way such that the agent can verify it when deemed necessary;\
  \\end\{enumerate\}\
  \\item Without maintaining the reciprocity between binary code and the data it operates on, the semeiosis performed by the end user on the result of the data processing and their subsequent semantics cannot be guaranteed to be similar as intended by the software engineer.\
\\end\{enumerate\}\
\\textbf\{Implications:\}\
\\begin\{enumerate\}\
\\item The coherence principle is a necessary condition for supporting semantic interoperability;\
\\item The scope of semantic validity \\& accuracy is to be addressed explicitly such that it can be referred to;\
\\item Reuse of data often implies reuse of the data processing code, and vice versa. Having established explicit coherence improves the quality of data and code reuse, and facilitates the verification that the scope of the semantic validity \\& accuracy applies in a new context as well;\
\\item manageability ...?\
\\item understandability ...?\
\\end\{enumerate\}  \
\\end\{mmdp\}\
\pard\pardeftab720\ri-16872\partightenfactor0
\cf0 \
Coherence between models can be established with use of a single unique reference against which the truth of the expressions of both models can be verified. In semiotics, this single unique reference is considered reality, as indicated in \\cref\{fig:semiotic-triangles\}(b) by the *trueness* characteristic. Except as toy example in [@Steels:2008tr], this is clearly not possible. The *correctness* characteristic is the only alternative left, taking the conceptualisation node as its principle point of reference, as depicted in \\cref\{fig:single-semantic-reference\}(b). This is exactly what the mathematical branch of *formal semantics* achieves [@Gamut1991; @Genesereth:1987dg] with its three main characteristics, depicted in \\cref\{fig:single-semantic-reference\}(a), viz connecting (i) an abstract syntax of a language to (ii) a Domain of Interpretation (DoI, usually a set theoretic framework) by defining (iii) an interpretation function from the abstract syntax onto the set theoretic framework. In terms of the semiotic triangle, \\cref\{fig:semiotic-triangles\}(b), this implies the following:\
\
(i) a semantic monolith is formulated as two *representation* nodes, each node formulated by use of an abstract syntax (and grammar) as its modelling language. In this reading, a model is a particular constellation of tokens;\
(ii) a particular *conceptualisation* is a mathematical formulation as a DoI, viz specific constellation of (unnamed) individuals, sets of individuals, and sets of sets; \
(iii) each *subjectivation* edge is formulated as interpretation function that assigns a mapping from modelling language tokens onto the set elements, enabling the evaluation of a specific model against the intended conceptualisation from (i). \
\
In this way, the cognitive quality of the conceptualisation can be substituted with a set theoretic mathematical framework. Formulating the conceptualisation as a set theoretic model essentially remains a representation, albeit a mathematical one. One can argue that such substitution does not resolve the grounding problem, and appropriately so. Still, mathematics provide for a very exact way to express oneself, reducing the ambiguity that comes implicitly with any other language, and such mathematical constructs come as close to the conceptualisation as we possibly can get with a token-based machine. Furthermore, logical constructs used at the syntactical level can be interpreted into set theoretic operations, facilitating the evaluation of (complicated) expressions. Formal semantics thus provides a single DoI about a particular conceptualisation as principle point of reference for both the data model and the data processing model. The particular conceptualisation is then replaced with a particular DoI, and both subjectivation relations are replaced with their interpretation function for the abstract syntax of the models on that DoI. This has been depicted in \\cref\{fig:single-semantic-reference\}.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\ri-16872\partightenfactor0
\cf0 ![Maintaining the reciprocity between data and data processing models through a single semantic reference, viz the conceptualisation (b), represented as DoI, viz a selection of individuals with domain specific characteristics defined as sets (a).][def:ssref]\
\
In conclusion, we explain software semantics as the reciprocity between data and software code, realised by maintaining the coherence between pairs of data and data processing models, by applying formal semantics to formulate a particular conceptualisation as the DoI that can act as semantic reference, and interpretation functions which perform the subjectivation from the data and operation models to that reference.\
\pard\pardeftab720\partightenfactor0
\cf0 \
The notion on semantic coherence can be seen in object-orientation (OO) as well, where the class can be seen as a construct similar to a semantic monolith. Indeed, OO does a very good job at enforcing a reciprocity between data and data operations. However, as a model OO can only provide for an informal \'93representation\'94 relation with reality as depicted in \\cref\{fig:software-models-reality\} due to the absence of a formal underlying framework and, henceforth, absence of a formal DoI. As we will see in \\cref\{explicit-semantics\}, OO makes a good instrument for maintaining coherence, but cannot represent semantics explicitly. \
\pard\pardeftab720\ri-16872\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 <2nd Principle: Make the ASM as small as possible, but not smaller than required to express a semantic element. Too vague, yet. Not necessary to convey the primary message, imo.>\
\
\
<!-- page additions -->\
\pard\pardeftab720\ri-10760\partightenfactor0
\cf0 [def:softmodelsreal]: src\\images\\SoftwareModelsReality.png \{#fig:software-models-reality\}\
\pard\pardeftab720\ri-16872\partightenfactor0
\cf0 [def:ssref]: src\\images\\SingleSemanticReference.png \{#fig:single-semantic-reference\}}