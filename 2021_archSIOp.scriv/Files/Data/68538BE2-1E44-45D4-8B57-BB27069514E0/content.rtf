{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-BoldMT;
\f3\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Loose coupling is known as a strong architectural principle that brings about many advantages. This holds for its semantic reading as well: agents that are loosely coupled in their semantics (i) can communicate in their own native representations without the need to learn or integrate foreign representations; (ii) need to define semantics only once for a particular DoA, and use it in concert with every software agent that operates in that DoA; (iii) can define their semantic representations geared to fit their particular domain and application(s) in isolation from global semantics; and (iv) can re-use available, local semantics, improving the economic value of local semantics throughout their lifetime. Moreover, since re-use implies another confrontation with reality, (v) the quality and scope of the local semantics will improve and extend over time. Here, we address how to achieve *loosely coupled semantics*. \
\
\pard\pardeftab720\partightenfactor0
\cf0 Loose coupling in the classical sense is realised through the principles of separation of concerns and transparency. Hence, it stands to reason to investigate how to apply those principles at the semantic level, and whether that brings the advantages as described above.\
\
In its original reading, 
\f1 <$Scr_Cs::1>
\f2\b separation of concerns
\f1\b0 <!$Scr_Cs::1>
\f0  turns complex functionalities into simple, atomic and complementary functional capabilities, each showing high internal cohesion and few, preferably none, external dependencies. In a semantic reading, semantic separation of concerns (sSoC) refers to providing complementary and atomic 
\f1 <$Scr_Cs::2>
\f3\i semantic
\f1\i0 <!$Scr_Cs::2>
\f0  functionalities. These are functionalities that support sIOP and its primary motive, i.e., dynamic business collaboration. The latter, communication in support of dynamic business collaboration, requires the former, communication in support to sIOP itself; but both are two distinct areas of investigation, as follows. \
\
First, we investigate the concern on 
\f1 <$Scr_Cs::2>
\f3\i dynamic business collaboration
\f1\i0 <!$Scr_Cs::2>
\f0 , and we do that from the perspective of interoperability, viz what type of data do stakeholders exchange about their collaboration? The objective of the collaborating stakeholders is to establish, in concert, a SoA that represents their collaboration goal. This projected SoA is seldom achieved in one single step. Instead, a series of intermediate steps produce subsequent SoAs along which the collaborative goal is achieved. We consider these intermediate SoAs as being composed of local SoAs: states that are local to and produced by the individual stakeholders. And where an individual stakeholder will use SoAs from other stakeholders in producing their subsequent local SoA, together, the stakeholders will converse about resolving dependence between their local SoAs, the order in which these need to be established, or whether a certain SoA has already been achieved, or what local SoAs contribute to the shared objective. This requires coordination between stakeholders which is geared towards support for business collaboration, and we introduce the notion of a 
\f1 <$Scr_Cs::2>
\f3\i business conversation
\f1\i0 <!$Scr_Cs::2>
\f0  that accomplishes that coordination, as follows:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\pardeftab720\sl288\slmult1\partightenfactor0

\f1 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f0\fs22 \\begin\{mmdef\}[Business conversation]\\label\{def:business-conversation\}\
  A business conversation coordinates telic behaviour from different software agents by exchanging semantic meaning, with the intent \AppleTypeServicesU0 to jointly achieve those individual states of affairs that collaboratively constitute a necessary (intermediate) 
\fs24 conversation
\fs22  state towards achieving the objective of a particular business collaboration.\AppleTypeServicesU1 \
\\end\{mmdef\} 
\fs24 \AppleTypeServicesU0 \
\pard\pardeftab720\partightenfactor0

\f1 \cf0 <!$Scr_Ps::0>
\f0 \
A business conversation measures its success and validity in terms of the shared SoAs that have, or have not, been achieved by each stakeholder involved in that conversation, in a necessary order and of a particular quality. Each conversation produces a shared conversation state, the achievement of which is a necessary step towards the collaborative goal and involves more than one stakeholder. A conversation state thus incorporates SoAs that are specific for each agent that contributes to the conversation: a SoA that is produced by a single agent, on behalf of a stakeholder, representing a SoA internal to that stakeholder. Indeed, in order to produce such internal SoA, e.g., a payment, might require a certain SoA internal to another stakeholder, e.g., the availability of an invoice. Therefore, a conversation brings together stakeholders, their software agents and roles as DSP or DSC, the exchanged semantic meaning, the conditions and/or pragmatic meaning that must be met by each individual software agent in order to select the proper telic processes, and all this in a joint and coordinated effort. Business conversations, then, collectively constitute a business collaboration. How these different aspects relate to each other has been depicted in \\cref\{
\fs22 \AppleTypeServicesU1 fig:soas
\fs24 \AppleTypeServicesU0 \}. Similar to the comprehension process, such requires its own protocol to 
\f1 <$Scr_Cs::2>
\f3\i coordinate telic behaviours
\f1\i0 <!$Scr_Cs::2>
\f0  of the participating stakeholders, and 
\f1 <$Scr_Cs::2>
\f3\i orchestrate business conversations
\f1\i0 <!$Scr_Cs::2>
\f0  towards the shared collaboration goal. This coordination protocol is directed to attain, with each stakeholder, the execution of telic behaviour (from its subordinate software agent(s)) that fits the business conversation in producing the shared conversation state. Note that the protocol is about SoAs, and although the agents must comprehend those SoAs, such comprehension is not part of this protocol. This implies that the protocol is 
\f1 <$Scr_Cs::2>
\f3\i about
\f1\i0 <!$Scr_Cs::2>
\f0  semantic meaning and thus remains agnostic to the domain semantics itself, allowing it to become part of the infrastructure. We introduce \\cref\{dp:bcpp\}, {\field{\*\fldinst{HYPERLINK "scrivcmt://2DBFC1FB-C2A0-4960-867F-8FFB97C2BE03"}}{\fldrslt the business conversation protocol principle}}.\
\
![Ontological construct (based on gUFO [@Almeida2019]), clarifying that a SoA is produced by an Action involving an Actor. A Business Collaboration produces the Collaboration Goals shared by Stakeholders. On behalf of a Stakeholder, the Software Agent partakes in a Business Conversation producing a particular Conversation State towards the Collaboration Goal. On receipt of data, the DSC shows Comprehension Behaviour and subsequently a prescribed telic behaviour to produce a predefined Stakeholder State that contributes to the shared Conversation State. A DSP might partake in such telic behaviour when deemed necessary by the DSC, viz when the latter requires for its telic behaviour an individual SoA that is produced by the DSP. In such case, the DSP and DSC temporarily change roles.][def:soas]\
\
Second, about semantic functionalities in support of sIOP, we already implied a very fundamental separation without which \\cref\{dp:shp,dp:srp,dp:mfapp,dp:spp\} cannot be considered, viz separation between 
\f1 <$Scr_Cs::2>
\f3\i data syntax
\f1\i0 <!$Scr_Cs::2>
\f0  and the 
\f1 <$Scr_Cs::2>
\f3\i semantic meaning
\f1\i0 <!$Scr_Cs::2>
\f0  about the DoA. Providing that software remains incapable of genuine undestanding, this translates to a separation between syntax representing the data payload of the communication and the syntax representing the semantic payload of the data. The former syntax, consolidating the data exchange, belongs to the ICT discipline and can follow syntactic standards; the latter syntax, representing semantics, must remain outside the scope of the ICT discipline. We consider this the primary sSoC, explained in \\cref\{anchorage-semantic-concerns\} by the analogy with logistics: vehicles (data syntax) firmly attach and carry cargo (semantic meaning) without becoming dependent on each other. Furthermore, in \\cref\{semantics-in-software\}, item 5, we distinguished between data comprehension and the subsequent telic behaviour as two different concerns that we will describe as follows. \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 <$Scr_Cs::2>
\f3\i Data comprehension
\f1\i0 <!$Scr_Cs::2>
\f0  measures its success and validity in terms of being able to reconstruct, for all semantic meaning that it receives, all semantic reciprocities that are involved by those ASMs that are addressed by the semantic meaning that the data represent. Such comprehension process requires its own protocol (\\cref\{dp:spp\}) to, e.g., request for semantic meaning that is missing from the DSC\'92s ASMs but required in the context of its specific pragmatic meaning. \
\
Complementary, 
\f1 <$Scr_Cs::2>
\f3\i telic behaviour
\f1\i0 <!$Scr_Cs::2>
\f0  provides functionality to achieve a certain result. In our sIOP perspective, it measures its success and validity in terms of the SoAs that the agent can produce. Such SoA must be in line with the agent\'92s purpose, and the quality of such SoA must be warranted by the quality of the comprehension result and domain context. Note that in \\cref\{semantics-in-software\}, item 9, we indicate that telicity is part of the System Model that is semantically grounded in the DM. That implies that the local SoA that is produced by the agent shall be represented in terms of semantic meaning as specified in the DM. The related DPs, DP2 and DP8, have been provided in [@Brandt2021a].\
\
The comprehension and telic concerns represent, together with the primary concern and the business collaboration concern, four complementary semantic capabilities that we consider necessary in support of loosely coupled semantics. One additional concern is discussed in \\cref\{engineering-semantic-coherence\}. These four semantic concerns embody a separation between 
\f1 <$Scr_Cs::2>
\f3\i understanding
\f1\i0 <!$Scr_Cs::2>
\f0  and 
\f1 <$Scr_Cs::2>
\f3\i use
\f1\i0 <!$Scr_Cs::2>
\f0  of semantics, founding the aforementioned credo 
\f1 <$Scr_Cs::2>
\f3\i understanding precedes use
\f1\i0 <!$Scr_Cs::2>
\f0 . More importantly, with these four loosely coupled semantic functionalities, one can build dynamic business collaboration as shared processes involving shared conversation states and constituting stakeholder SoAs, without insisting upfront on a particular instantiation in particular agents with their used semantics that collaboratively implement the collaboration. Moreover, 
\f1 <$Scr_Cs::2>
\f3\i how
\f1\i0 <!$Scr_Cs::2>
\f0  each agent is to achieve their part in such shared SoA can be left to the discretion of the involved stakeholders. At the same time, such sSoC allows reuse, maintenance and evolution of these semantic functionalities independently from each other. \
We propose \\cref\{dp:ssoc\}, semantic separation of concerns (which includes aspects from \\cref\{semantic-mediation\}). \
\
The classical reading on 
\f1 <$Scr_Cs::1>
\f2\b transparency
\f1\b0 <!$Scr_Cs::1>
\f0  separates 
\f1 <$Scr_Cs::2>
\f3\i access
\f1\i0 <!$Scr_Cs::2>
\f0  to the unique functions from the 
\f1 <$Scr_Cs::2>
\f3\i particular design and implementation
\f1\i0 <!$Scr_Cs::2>
\f0  of those functions: Remaining agnostic to *how* its functions are achieved makes it possible to communicate with minimal mutual dependency. Similarly, semantic transparency is about remaining agnostic to how semantics are *represented* and *conceptualised*. Such semantic transparency makes it possible to communicate with minimal syntactic dependency, without prior mutual agreements on semantic representation, and without access to background knowledge that applies to conceptualisation into local semantic and pragmatic meaning. Such semantic transparency is realised by a disconnect on the global (domain) level between data syntax and semantic meaning. This requires catering for alignments that address reconciliation on the semantic level only. Despite the need to introduce a semantic oracle that knows how to align distinct representations (which is exactly the responsibility of the human in the loop as augmenting authority, discussed in \\cref\{semantic-reconciliation\}), an alignment, thus, functions as an interface that enforces semantic transparency between communicating peers. Consequently, semantic transparency implies the need to transcribe between different representations of semantics without impairing them, preferably by the infrastructure (we defer how this can be achieved to \\cref\{roadway-mediation-concerns\}). In its classical reading, transparency also requires standard APIs where the semantics of each parameter is defined carefully. APIs are to be similarly defined for semantic transparency. But, in order to maintain the separation between semantics and syntax, and since the parameter values that are used by the API 
\f1 <$Scr_Cs::2>
\f3\i carry semantic meaning
\f1\i0 <!$Scr_Cs::2>
\f0 , the parameters\'92 definitions need to be 
\f1 <$Scr_Cs::2>
\f3\i about semantics
\f1\i0 <!$Scr_Cs::2>
\f0 , i.e., using meta-semantics (both on achieving comprehension and on achieving business conversations), as opposed to be 
\f1 <$Scr_Cs::2>
\f3\i about the domain
\f1\i0 <!$Scr_Cs::2>
\f0 , i.e., using domain semantics. In this reading, semantic transparency also minimises the influence of semantics from collaborating agents on one\'92s own semantics. These are important considerations that shape the form of the aforementioned business conversation and semantic protocols. \
We propose \\cref\{dp:st\} to cater for semantic transparency.\
\
\
\
<!-- Page additions -->\
[def:soas]: src\\images\\SoAs.png \{#fig:soas width=90%\} \
\
}