{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-ItalicMT;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 A conversation between two human agents that share a mutual purpose brings about a natural responsibility for both of them in order to achieve that purpose. These conversational responsibilities address the semantics and pragmatics of the communication and much less the syntax of it. For collaborating software agents, we consider them to have responsibilities towards achieving their shared objective as well. These are responsibilities that refer to establishing their mutual comprehension about the semantic meaning of the exchanged data, i.e., the SoA, that, together with their individual pragmatic meaning, leads to behaviour of achievement. The purpose of the human conversation is to exchange semantic meaning that is required for the pragmatic meaning to decide on what task to do next. This has been formulated by [@Grice:1991BT] as \'93
\f1\i Make your conversational contribution such as is required, at the stage at which it occurs, by the accepted purpose (\'85) of the talk exchange in which you are engaged
\f0\i0 \'94, coined by him as the Cooperative Principle. Responding to this principle from the (semantic and pragmatic) perspective of collaborative software agents, we formulate the second concern on sIOP, as follows.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\pardeftab720\sl288\slmult1\partightenfactor0

\f2 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f0\fs22 \\begin\{mmconcern\}[Cooperation concern]\\label\{cncrn:cooperation\}\
    Collaborating software agents will engage in a conversation in order to achieve the purpose of the collaboration, which is a shared responsibility. The purpose of the conversation is to exchange particular states of affairs, that is, semantic meaning, that expresses the coordination required to achieve the shared objective. This brings about a natural responsibility for each of the software agents to comply to the cooperation principle. What are those responsibilities, how are they distributed over the DSP and the DSC, and what conversational tools are required to fulfil those responsibilities?\
\\end\{mmconcern\}
\fs24 \AppleTypeServicesU0 \
\pard\pardeftab720\partightenfactor0

\f2 \cf0 <!$Scr_Ps::0>
\f0 \
In response to the cooperation principle, [@Grice:1991BT] described four *maxims* as the particular purpose of communication, viz to serve:\
\
1. Quantity: Make your contributions as informative as is required (for the current purpose of the exchange), and not more than is required;\
2. Quality: Do not say what you believe to be false, or for which you lack evidence;\
3. Relation: Be relevant (to the immediate needs);\
4. Manner: How is being said what is said, e.g., avoid obscurity of expression, ambiguity, and be brief and orderly.\
\
We consider these maxims in relation to \\cref
\fs22 \AppleTypeServicesU1 \{cncrn:cooperation\} and investigate the semantic responsibilities that apply
\fs24 \AppleTypeServicesU0 . \
\
We have seen in the previous section that the open world assumption allows every software agent to develop its own ontological view on its DoA. Provided that agents collaborate, despite the clear overlap that exists in the DoA, no guarantees can be given on the existence of any overlap in how they\'92ve build their ontological view, and hence, the semantic meaning of the exchanged data. Following 
\f2 <$Scr_Cs::1>
\f3\b Maxim 1 (Quantity)
\f2\b0 <!$Scr_Cs::1>
\f0  the responsibility emerges for a DSP to also inform the DSC about the semantic meaning of the exchanged data, i.e., to provide access to its DM, in order to exchange not data, but SoAs in the shared DoA that the data refer to. This triggers 
\f2 <$Scr_Cs::1>
\f3\b Maxim 4 (Manner)
\f2\b0 <!$Scr_Cs::1>
\f0 , how is being said what is said, and begs the question 
\f2 <$Scr_Cs::2>
\f1\i What semantic principles do we agree upon?
\f2\i0 <!$Scr_Cs::2>
\f0  When exchanging SoAs, the semantic meaning of the DSP and DSC must be compatible with each other because these specify the representation of their conceptualisation. Obscurity and ambiguity cannot be avoided with incompatible conceptualisations. This makes semantic compatibility a precursor to sIOP. Merriam-Webster defines *compatibility* as \'93being a computer designed to operate in the same manner and use the same software as another computer\'94[^compatibility]. We propose the following analogous definition on semantic compatibility, as follows:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\pardeftab720\sl288\slmult1\partightenfactor0

\f2 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f0\fs22 \\begin\{mmdef\}[Semantic compatibility]\\label\{def:semantic-compatibility\}\
Semantic compatibility reflects the extent to which a software agent is designed to comprehend data in the same manner according to similar semantic principles, distinctions and rules as another software agent. \
\\end\{mmdef\}
\f2\fs20 \
\pard\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \AppleTypeServicesU0 <!$Scr_Ps::0>
\f0 \
\pard\pardeftab720\partightenfactor0
\cf0 Semantic compatibility is closely connected to what is known in the conceptual modelling discipline as a principled 
\f2 <$Scr_Cs::2>
\f1\i ontological commitment
\f2\i0 <!$Scr_Cs::2>
\f0  (OC). An OC concerns meta-ontology rather than ontology proper; it asks about the fundamental entities or kinds of entity that exist 
\f2 <$Scr_Cs::2>
\f1\i according to a given theory or discourse
\f2\i0 <!$Scr_Cs::2>
\f0 . An OC emerges from applying the formal tools of ontological analysis: theories of Essence and Identity; Parts (Mereology); Unity and Plurality; Dependence; Composition and Constitution; Properties and Qualities; and Space and Time. The manner and extent to which support is given to these ontological theories results in distinguishing certain types of entities (both the things and their relationships) in reality. The existence of these types are thus committed to, their existence being neutral with respect to the observed reality, viz applying to any DoA. We provide the following practical definition on an OC.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\pardeftab720\sl288\slmult1\partightenfactor0

\f2 \cf0 \AppleTypeServicesU1 <$Scr_Ps::0>
\f0\fs22 \\begin\{mmdef\}[Ontological commitment]\\label\{def:oc\}\
The OC of a (domain) model refers to (generic) distinctions that are carried by the modeling language constructs as a commitment about the generic categories that are considered to exist in reality according to a given theory. \
\\end\{mmdef\}
\f2\fs20 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \AppleTypeServicesU0 <!$Scr_Ps::0>
\f0 \
Ontological commitments are often implemented as Top-Level Ontologies (TLOs), a.k.a. Upper or Foundational Ontologies. Note that TLOs \'93do not ask for 
\f2 <$Scr_Cs::2>
\f1\i what there is
\f2\i0 <!$Scr_Cs::2>
\f0 , but for what a given remark or doctrine [\'85] 
\f2 <$Scr_Cs::2>
\f1\i says
\f2\i0 <!$Scr_Cs::2>
\f0  there is\'94 [@Quine:1953er]. Consequently, several are in existence today, e.g., UFO [@Guizzardi:2015ky], GFO [@Herre2010], SUMO [@Niles:2001], YAMAYATO [@Mizoguchi:2010vv], BFO [@Grenon2004], DOLCE [@Masolo2002], EO [@
\fs26 \expnd0\expndtw0\kerning0
Uschold1997
\fs24 \kerning1\expnd0\expndtw0 ] and more, each following their own doctrine, and each with their similarities and differences to other TLOs [@Jansen2008;@Mascardi2007]. Note that an OC applies to semantic meaning directly, and to pragmatic meaning indirectly since the latter infers the consequences of the former. \
\
Consequently, in order to establish the extent of semantic compatibility between collaborating software agents, both agents must make their ontological commitment underlying their domain models, explicit. In conclusion, Maxim 1 calls for disclosing the semantic meaning of the DM; this subsequently addresses Maxim 4 and calls for the application of an OC, that must also be disclosed in response to Maxim 1 again. We formulate \\cref\{dp:srp\} in \\cref\{tab:dps\} to consolidate these semantic responsibilities of the software agents\'92 DSP role. \
\pard\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2 \cf0 <$Scr_Cs::1>
\f3\b Maxim 2 (Quality)
\f2\b0 <!$Scr_Cs::1>
\f0  states that the DSP must assure to only exchange data that are faithful to reality, i.e., reflect the current SoA properly. We assume software agents to not break this maxim on purpose, but that does not mean that the conversation does not introduce quality issues. Quality issues can emerge from the so-called 
\f1\i false-agreement problem
\f0\i0  (FAP) [@Guarino:1998wq, Sec.2.4], resulting in collaborating agents to falsely belief that they agree. This is the case when the DMs of both agents 
\f2 <$Scr_Cs::2>
\f1\i allow
\f2\i0 <!$Scr_Cs::2>
\f0  for statements about the SoA that are not 
\f2 <$Scr_Cs::2>
\f1\i intended
\f2\i0 <!$Scr_Cs::2>
\f0 . A statement that is non-intended by either the DSP, DSC or both, but is exchanged as truthful fact nonetheless, will ruin sIOP by inducing 
\f2 <$Scr_Cs::2>
\f1\i phantom semantics
\f2\i0 <!$Scr_Cs::2>
\f0 : invalid but seemingly valid semantics received by the DSC. For instance, on data-value quality, already in our introductory example, the time value was intended to be expressed agnostic to daylight saving time (DST) by the DSC whilst the DSP intended to answer the question \'93What time is it?\'94 and, hence, included DST; a typical example of the FAP. By constraining the value dimension for time to either ignore or include DST but not both, the false agreement would not have occurred. As another example, now on ontological quality, viz the DM\'92s faithfulness to the DoA, assume both models specify an event as a combination of a verb with a noun. Without constraining their order of appearance, then, the intention to exchange an event, denoted $E$, about the verb \'93to Ship\'94, denoted $S$, and the noun \'93the Bank\'94, denoted $B$, statement $E(S,B)$ allows for two meanings about the event: the intended meaning \'93the bank that shipped\'94 and the allowed, unintended meaning \'93the ship that banked\'94. Since the DSC is allowed to comprehend the latter, while they seemingly agree on the SoA, they actually disagree. The quality maxim, therefore, creates a responsibility for any software agent that engages in collaboration to minimise the chance to induce the FAP. We formulate \\cref\{dp:mfapp\} to cater for the quality maxim.\
\
In its semantic reading, 
\f2 <$Scr_Cs::1>
\f3\b Maxim 3 (Relation)
\f2\b0 <!$Scr_Cs::1>
\f0  begs the question 
\f2 <$Scr_Cs::2>
\f1\i Why do we say this, to what purpose are we communicating?
\f2\i0 <!$Scr_Cs::2>
\f0  By token of the collaboration, the relevance of the data exchange for the DSC can be considered a matter of fact, indeed. In fact, the overall objective of the conversation is to exchange the SoAs in order to progress towards the shared objective the collaboration was established for in the first place. However, exchange of a SoA cannot be done directly; only by exchanging data we indirectly refer to the SoA that occurs in the DoA. Where the previous two design principles address semantics directly, this maxim addresses the need to talk 
\f2 <$Scr_Cs::2>
\f1\i about
\f2\i0 <!$Scr_Cs::2>
\f0  semantics, specifically in order to prepare for sIOP, viz the (indirect) exchange 
\f2 <$Scr_Cs::2>
\f1\i of
\f2\i0 <!$Scr_Cs::2>
\f0  semantics. Additionally, collaboration requires to influence or direct the action of the communicating peer: the DSC to make the DSP to improve on its support for the DSC, and the DSP to have the DSC achieve the goal of the collaboration [@Grice:1991BT, p.47]. These conversations require the existence of a protocol on the semantic level, which is significantly different from protocols that exist at the syntactical level. The purpose of the semantic protocol is to consolidate a critical level of semantic compatibility in order to consolidate mutual comprehension on the applied semantics, allowing the sIOP to emerge that is required to indirectly exchange SoAs by exchanging data. Clearly, the semantic protocol shows a bootstrapping process that is independent on the actual domain semantics until sIOP has been achieved. As such, it can become part of the communication infrastructure and only requires the software agent to support its engagement with it. Similar to any other protocol, the semantic protocol can go back to a previous phase whenever issues emerge in the current phase of the process. We formulate \\cref\{dp:spp\} to cater for Maxim 3.\
\
<!-- page additions -->\
\
[^compatibility]: Merriam-Webster, https://www.merriam-webster.com/dictionary/compatibility, accessed Jan 2022\
[^sparql]: W3C Recommendation 21 March 2013, {\field{\*\fldinst{HYPERLINK "https://www.w3.org/TR/sparql11-query/"}}{\fldrslt https://www.w3.org/TR/sparql11-query/}}, accessed Aug 2022\
\
\
}