{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 The separation of (semantic) concerns leads to distinct responsibilities for the software agents and the semantic mediator in support of the business collaboration. The mediator takes the responsibility to:\
\
* encapsulate collective semantics in a separate mediator object\
* respect\AppleTypeServicesU1  / implement the topology of collaboration, i.e., the way that the agents and their conversations are organised during their collaboration\AppleTypeServicesU0 \
* scope a mediation (bind one mediatior instance) to conversations that show high coherence and low coupling, providing that a single collaboration can encompass multiple conversations. \
\
{\field{\*\fldinst{HYPERLINK "scrivcmt://B00D4FE1-7145-4069-BC71-DF801B9D3578"}}{\fldrslt These responsibilities encapsulate the complexity of the semantics involved in business collaboration into a single central component}}, abstracting it away from the individual involved agents. At the same time, the software agents remain responsible for:\
\
1. managing the evolution of its own semantics;\
2. adaptation of its pragmatic meaning when exchanged semantic meaning is extended to other perspectives or purposes that is of interest for the business that it facilitates;\
3. managing the alignments that apply for collaboration with the other agents.\
\AppleTypeServicesU1 \
The capabilities identified in \\cref\{formulating-the-concern\}, i.e., transcription and coordination, are realised by the semantic mediator. This implies that the mediator becomes another actor in the semantic protocol in order to realise its responsibilities. The protocol should allow the mediator to escalate when alignments are incomplete towards a \AppleTypeServicesU0 mechanical reconciliation process on a bounded set of semantic differences by, e.g., ontology negotiation [@Diggelen:2007vd;@Diggelen:2006en;@Wang2010;@Zhu2019], or ontology alignment [@Euzenat:2013ie;@Silva2005]. And when mechanical reconciliation fails, the protocol should allow the mediator to revert to escalating the reconciliation to a human in the loop (\\cref\{semantic-reconciliation\}) and defer any further collaboration.\AppleTypeServicesU1  Furthermore, the protocol must provide additional support to the scalability concern, \\cref\{
\fs22 cncrn:scalability\}, as follows.
\fs24 \
\
Since software agents converse \'97and therefore exchange data\'97 with the semantic mediator only, the latter\'92s transcription capability can be enforced for each and every data exchange between all agents. The information that is required for that capability, i.e., the domain models specifying the semantics meaning of the data, and the alignments that apply between them, is available to the semantic mediator. Whether the data transcription itself is valid, and hence can operate without producing phantom semantics depends on the applied transcription method; this is addressed in \\cref\{discussion-conclusions-future-work\}. Since the transcription algorithm is agnostic to the actual data and their semantics, the semantic mediator can remain a generic infrastructural service, to be instantiated by configuration to realise a DSP/DSC-dedicated data transcription capability. \
\
The coordination capabilities also belong to the responsibility of the semantic mediator. Again, since it is involved in every conversation with all concerned software agents, it is in the perfect position to dispatch the semantic meaning between the involved DSP/DSC-pair. The valid executing of that capability only depends on a business process flow specifying the business collaboration and the conversations it includes, which can be provided upfront. Due to its transcription capability, the semantics of the conversation, viz the semantic meaning to exchange, can be specified in terms of the DSP, the DSC, or mixed. Like the transcription capability, the coordination algorithm is agnostic to the business collaboration and its conversations, and can thus remain generic and is to be instantiated by configuration, here the actual business flow. As for specification languages, several standards are available already amongst which the well-known OMG\'92s BPML and OASIS\'92 WS-BPEL languages, however, formal business process languages are also available, e.g., [@Menzel2001].   \
\
From the perspective of the software agent, in order to collaborate it only needs to send and receive requests to and from a mediator object. All routing and transcripting of the data is then taken care of. This \AppleTypeServicesU0 relieves the individual DSP agents from knowing what semantic meaning to exchange to what DSC agent at what moment; it allows the individual DSC to comprehend the received data since it is represented in its own native semantics. Additionally, DSCs can make use of the available, distributed knowledge of all other agents about the DoA when it is in demand of specific SoAs, without managing that very knowledge. With the increase of conversations, collaborations and software agents, the complexity of the mediator will become significant. Scalability is served by scoping a single mediation instance to one single collaboration, with the potential to further reduce complexity by allowing the collaborating mediation instance to instantiate and control new mediators for more complex conversations. This shows how scalability on the operational level can be achieved. \
\
We formulate \\cref\{dp:mediation\} and extend \\cref\{dp:ssoc\} with the identified design demands to their effect.\
\
\
<!-- page additions -->\
}