{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \\Cref\{d
\fs22 \AppleTypeServicesU1 ef:semantic-scalability
\fs24 \AppleTypeServicesU0 \} requires to allow to adopt or consolidate additional semantic perspectives or more complicated semantic heterogeneity without compromising sIOP. Adding another perspective might imply:\
\
* to extend the purpose of the collaboration, either by adding different details to the existing purpose, or by adding new goals that are to be achieved by it;\
* to consider new background knowledge to improve on one\'92s comprehension of the situation, or on one\'92s ability to achieve the purpose of the collaboration;\
* to include other contexts within which the collaboration is to happen as well.\
\
Clearly, a semantic perspective is intimately related to the pragmatic meaning, in the sense that the latter is a causal consequence of the former. Adding another semantic perspective to a collaboration implies, therefore, that the pragmatic meaning of the DSC might change. Its first engineering consequence is the need to separate the pragmatic meaning from the semantic meaning in order to minimise the impact of those changes to the semantic meaning and the other agent behaviour. This design principle has already been identified in \\cref\{semantics-in-software\}. \
\
Another consequence of semantic scalability is the need to support *loosely coupled semantics*. As analogy, consider a vehicle with its cargo. Logistics rely on external transfer services that allow the cargo to be transported over different vehicles, transferring cargo from a truck into an aircraft into a ship into a truck again, without ruining the cargo. This requires the cargo to be firmly connected to the vehicle, but at the same time to remain completely independent from any particular vehicle in order to complete the transport. 
\f1 <$Scr_Cs::0>
\f2\i High cohesion and low coupling
\f1\i0 <!$Scr_Cs::0>
\f0  is a need for sIOP as well. When software agents interact they exchange semantic meaning. Loosely coupled semantics implies that the semantic meaning (the cargo) remains as independent from the representation of semantics (the vehicle) as possible. Similarly to logistics, sIOP should rely on infrastructural services that can transcribe the semantic representation (cargo transfer services) from its native syntax into a foreign syntax without invalidating the semantic meaning that it bears. Loose coupling is known as a strong principle which brings about many advantages. This holds for its semantic reading as well: agents can (i) communicate in their own native representations without the need to learn or integrate foreign representations; (ii) define semantics only once for a particular DoA, and use it in concert with every software agent that operate in that DoA; (iii) define their semantic representations in isolation from global semantics and geared to fit their particular domain and application(s); and (iv) re-use available, local semantics which increases its quality and economical value.\
\pard\pardeftab720\partightenfactor0
\cf0 \
Loose coupling in the classical sense is realised through the principles of separation of concerns and transparency. In its original reading, 
\f1 <$Scr_Cs::1>
\f3\b separation of concerns
\f1\b0 <!$Scr_Cs::1>
\f0  turns complex functionalities into simple, atomic and complementary functional capabilities, each showing high internal cohesion and few, preferably none external dependencies. In a semantic reading, separation of concerns refers to providing complementary and atomic functionalities about data communication, data comprehension and business collaboration. The first implements data transfer protocols, e.g., message-based and query-based communication technologies, which rely on syntax only, can co-exist independently from each other, and remains independent from the communicated semantic meaning. Contrarily, data comprehension acts on the data semantics and implements a first phase in a larger collaboration process. Such comprehension process might have its own protocol (\\cref\{dp:spp\}) to verify the shared SoA in the DoA, or even to mechanically reconciliate semantic differences where possible, e.g., ontology negotiation [@Diggelen:2007vd;@Diggelen:2006en;@Wang2010;@Zhu2019], ontology alignment [@Euzenat:2013ie;@Silva2005], or when this fails, to escalate the reconciliation to a human in the loop (\\cref\{semantic-reconciliation\}) and defer further collaboration. Another aspect of semantic separation of concerns is about maintaining complementary knowledge areas in the DoA, each addressing a small, well-defined scope or knowledge focus that follow the idea of \'93high cohesion, low coupling\'94. This is another application of Maxim 1, about the quantity of communication and the subsequent need to identify the overlapping parts of the DSP\'92s and DSC\'92s representations only. {\field{\*\fldinst{HYPERLINK "scrivcmt://DBC462A1-542F-4526-9ED5-29A1DF08E709"}}{\fldrslt Together, this results in modularised semantics}} that show modules with a clear boundary and single focus on, e.g., a phase in a protocol, a particular conversation in collaboration, or narrow-scoped knowledge required to achieve a specific result. \
We propose \\cref\{dp:ssoc\}, semantic separation of concerns (which includes aspects from \\cref\{semantic-mediation\}). \
\
The classical reading on 
\f1 <$Scr_Cs::1>
\f3\b transparency
\f1\b0 <!$Scr_Cs::1>
\f0  separates access to the unique functions from the particular design and implementation of those functions. Remaining agnostic to *how* its function are achieved makes it possible to communicate with minimal mutual dependency. Semantic transparency, or terminological transparency, remains agnostic to how semantics are *represented* and *conceptualised*, which makes it possible to communicate with minimal syntactic dependency, without prior mutual agreements on semantic representation, and without access to background knowledge that applies to the conceptualisation. Consequently, the need emerges for a semantic oracle that knows how to align distinct representations and to translate between them accordingly. This directly relates to the human in the loop as augmenting authority as discussed in \\cref\{semantic-reconciliation\}. \
In its classical reading, transparency also requires standard API\'92s where the semantics of each parameter is defined carefully. For semantic transparency, API\'92s are similarly defined but since the parameter values that are passed carry semantics, the parameters\'92 definitions need to be 
\f1 <$Scr_Cs::0>
\f2\i about
\f1\i0 <!$Scr_Cs::0>
\f0  semantics, i.e., at the meta-level, in order to maintain the separation between semantics and syntax. We propose \\cref\{dp:st\} to cater for semantic transparency.\
\
Additionally, semantic transparency implies the need to transcribe between different representations, preferably by the infrastructure. We defer how this can be achieved to \\cref\{roadway-mediation-concerns\}. \
}