{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-BoldMT;
\f3\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Unfortunately, loose coupling also brings about the need to communicate between stakeholders. Because, in order to attain the required coupling, the looser it is organised, the more run-time communication about the otherwise designed arrangements is required. In a semantic reading, such communication will be about establishing semantic homogeneity required to attain the desired business collaboration. In fact, the need for semantic transparency transpires by our insistence on semantic heterogeneity: In a semantically homogeneous environment, semantic transparency does not apply, removing any need to communicate about semantics. The question thus becomes: how to facilitate communicating about semantics and business collaboration while preventing the very same semantics and business collaboration to be carved in stone as immutable software encoding?\
\
The classical reading on 
\f1 <$Scr_Cs::0>
\f2\b transparency
\f1\b0 <!$Scr_Cs::0>
\f0  separates 
\f1 <$Scr_Cs::1>
\f3\i access
\f1\i0 <!$Scr_Cs::1>
\f0  to the unique functions from the 
\f1 <$Scr_Cs::1>
\f3\i particular design and implementation
\f1\i0 <!$Scr_Cs::1>
\f0  of those functions: Remaining agnostic to *how* its functions are achieved makes it possible to communicate with minimal mutual dependency. Similarly, semantic transparency is about remaining agnostic to how semantics are *represented* and *conceptualised*, minimising mutual dependency on exactly these aspects. In a semantically heterogeneous environment, semantic transparency consolidates communication with minimal syntactic dependency, without prior mutual agreements on semantic representation, and without the need to access background knowledge that applies to conceptualisation into local semantic and pragmatic meaning. \
\pard\pardeftab720\partightenfactor0
\cf0 \
Collaborating stakeholders are, thus, confronted with a semantically heterogeneous environment paired with no mutual knowledge whatsoever about the stakeholders\'92 native semantics. This raises the concern about how to exchange SoAs between collaborating agents without breaking the enforced semantic transparency. Indeed, collaboration between agents of business partners is impossible without some means to account for shared semantics, i.e., how should the DSC appreciate the received data in terms of how domein reality was conceptualised and represented? Without these means it is impossible for the DSC to derive the SoAs from data that are being exchanged, impeding every form of collaboration. Indeed, the concern on semantic transparency confirms the need for the two main concerns already identified: first, a semantic oracle that knows how to *reconcile distinct representations* of the shared semantics, \\cref\{spanning-reconciliation-concerns\}. Second, to attain a *semantically valid mediation* between the native representations of the DSP and that of the DSC, \\cref\{roadway-mediation-concerns\}. \
\
This leaves a single main concern regarding semantic transparency: how to access the semantic functionalities that enable the business collaboration while remaining agnostic to the domain semantics itself. This is about the form and function of application programming interfaces (APIs), which is an ICT responsibility, in support of the business collaboration, which is a business responsibility. It is the prerogative of the domain stakeholders to decide on a semantics that is considered appropriate, faithful and relevant to their business. We consider this concern a clear example of a business/IT alignment that, essentially, needs to remain as loosely coupled as possible. Changes to the IT should be minimised when business collaboration demands semantics to evolve, extend or change, and vice versa. From this, we derive an essential property that must be maintained under all circumstances: on implementing communication services between collaborating agents, the ICT discipline implements a negotiation about semantics or an exchange of SoAs (which, too, is about semantics); never will the ICT discipline implement communication services about the domain itself, i.e., in terms of domain semantics directly. Note that in its classical reading, transparency requires standardised APIs. These APIs use parameters embedded in their services, the semantics of which is carefully defined in order to not break transparency. In its semantic reading, APIs are to be similarly defined for semantic transparency, and particularly on semantic services of the DM. But, in order to maintain the separation between semantics and syntax, and due to the fact that the parameter values that are used by the API 
\f1 <$Scr_Cs::1>
\f3\i carry semantic meaning
\f1\i0 <!$Scr_Cs::1>
\f0 , the parameters\'92 definitions need to be 
\f1 <$Scr_Cs::1>
\f3\i about
\f1\i0 <!$Scr_Cs::1>
\f0  semantics, i.e., in terms of meta-semantics, as opposed to be 
\f1 <$Scr_Cs::1>
\f3\i about the domain
\f1\i0 <!$Scr_Cs::1>
\f0 , i.e., in terms of domain semantics. \
We propose \\cref\{dp:stp\} to cater for semantic transparency.\
\
}