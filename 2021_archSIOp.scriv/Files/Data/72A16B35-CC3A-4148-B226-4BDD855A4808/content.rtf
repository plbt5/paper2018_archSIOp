{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Since we here talk about *semantic* interoperability and *semantic* concerns, we consider it prime that we can discuss semantics isolated from concerns that involve syntax. This implies a separation between semantics and syntax.\
\
As analogy to describe such separation, consider a vehicle with its cargo. Logistics rely on external vehicle exchange services that allow the cargo to be transported over different vehicles, exchanging vehicles throughout the transport: a truck for an aircraft for a ship for a truck again, without ruining the cargo. This requires the cargo to be firmly connected to the vehicles, but at the same time to remain completely independent from any particular vehicle in order to complete the transport. When software agents interact, they transport semantics by exchanging data. Separating semantics from syntax implies that the semantics (the cargo) remains as independent from the representation of semantics (the vehicle) as possible. Similarly to logistics, sIOP must be able to rely on infrastructural services that can lift the semantic cargo from its native syntactical vehicle and connect it firmly at another, foreign syntactical vehicle without invalidating the semantic cargo. \
\
Therefore, we establish what is meant with semantics in software in the first subsection. We then defend the need to allow for what is called semantic {\field{\*\fldinst{HYPERLINK "scrivcmt://13315BAE-0675-42AD-8AB0-64CD3C028512"}}{\fldrslt heterogeneity}} and contrast that with the current approach to achieve sIOP through (syntactic) standards defining semantic homogeneity. The last subsection surfaces semantic concerns that follow from the responsibilities that apply between communicating agents. }