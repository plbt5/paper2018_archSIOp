{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \'93The successful standardisation of protocols made us believe that we should also 
\f1 <$Scr_Cs::0>
\f2\i standardise meaning
\f1\i0 <!$Scr_Cs::0>
\f0  on the Web. This is a fundamental 
\f1 <$Scr_Cs::0>
\f2\i misconception
\f1\i0 <!$Scr_Cs::0>
\f0 .\'94 [@Janowicz:2013ui]. This believe can be witnessed by the many initiatives taken by standards developing organisations (SDO) to develop a myriad on data standards, from e.g., 
\f1 <$Scr_Cs::0>
\f2\i Tradelens
\f1\i0 <!$Scr_Cs::0>
\f0  in Transport & Logistics domain and 
\f1 <$Scr_Cs::0>
\f2\i International Financial Reporting Standards
\f1\i0 <!$Scr_Cs::0>
\f0  in Finance & Accounting to, e.g., 
\f1 <$Scr_Cs::0>
\f2\i ICEN/EN 13606
\f1\i0 <!$Scr_Cs::0>
\f0 , 
\f1 <$Scr_Cs::0>
\f2\i SO/TC 215
\f1\i0 <!$Scr_Cs::0>
\f0 , and 
\f1 <$Scr_Cs::0>
\f2\i ISO/HL7 21731
\f1\i0 <!$Scr_Cs::0>
\f0  in the Electronic Health Records domain and the 
\f1 <$Scr_Cs::0>
\f2\i smartM2M
\f1\i0 <!$Scr_Cs::0>
\f0  standard by the IoT European Platform Initiative [@ETSI2019], to name a few. This current viewpoint on semantics defies semantic heterogeneity and enforce semantic homogeneity: one single agreed domain convention on how the syntactic representation and structure of the data or messages shall be semantically interpreted. Indeed, semantics are a particular representation of some part of the world, viewed from a particular perspective of use, however, we don\'92t acknowledge that the 
\f1 <$Scr_Cs::0>
\f2\i particular
\f1\i0 <!$Scr_Cs::0>
\f0  representation and 
\f1 <$Scr_Cs::0>
\f2\i particular
\f1\i0 <!$Scr_Cs::0>
\f0  perspective that the data standard enforces is universally shared by the domain users. And equally important, any particular perspective is just one out of many equally legitimate ones that our software are deemed to consider over the software\'92s lifecycle. Some examples are given in \\cref\{tab:perspectives\}.\
\
-------------------------------------------------------------------------------------------------------------------\
Reality to refer to          Perspective #1      Perspective #2       Perspective #3        ...  Perspective #n              \
---------------------------- ------------------- -------------------- -------------------- ----- ------------------\
Waves are                    *objects* that      *forces* exerted on  an *accumulation* of  ...  a *relation*      \
                             I can point at      dikes, walls or      other waves                between water, \
                                                 oil rigs                                        current, wind and\
                                                                                                 the seabed\
\
$\\;$\
\
How many terrorist attacks   1, the number       2, the number        4, the number         ...  2996, the\
can be counted on 9/11?      of involved         of collapsed         of involved                number of\
                             terrorist groups    towers               aircraft                   casualties[^1] \
\
-------------------------------------------------------------------------------------------------------------------\
\
   : Semantics follow many alternative but equally legitimate points of view on reality, implying that no single one true abstraction exists. Hence, semantic heterogeneity is a feature that should be preserved, as opposed to a bug that should be sought to correct. \\label\{tab:perspectives\}\
\
We consider semantic homogeneity only a solution for small scale domains, i.e., with a handfull of actors, and for a short lifespan. For larger domains and/or longer lifespans, it is not only an illusion, but striving for homogeneity brings about several important disadvantages: (i) implementation of semantic standards involves considerable expenses, and tends to solidify in software by implicit operations on data that are expensive to change, slowly setting the standard in stone; (ii) since semantic standards fix representation, semantics become conflated with syntax, making the semantic standard susceptible to variations in syntax that occur with increasing stakeholders or with contextual evolution over time; (iii) conflating semantics and syntax create dependencies of the semantic standard with the architectural paradigm, its particular implementation or applied technology; (iv) the previous three issues bring about a high impedance for the standard to change and to evolve; and they create a significant barrier (v) for new business opportunities, (vi) obstructing business agility, and (vii) disable a level playing field for newcomers that have to invest hugely to adopt the standard and reap its benefits. Essentially, it is sheer impossible to create for each particular domain, or part thereof, a semantic standard; even in the highly protocolised health domain that already addressed semantics in 1987 [@Spronk2014], adoption of its standards remains slow and cumbersome [REF]. This becomes all the more clear when comparing with the successful adoption of 2G GSM telecommunication standard, including its evolution to 2.5G, 3G, 3.5G, 4G and 5G standards during roughly the same era. Finally, these issues only worsen when extending sIOP to support inter-domain interoperability.\
\
We formulate the first (semantic) concern on sIOP:\
\
* *concern 1*: Acknowledge semantic heterogeneity as point of departure when establishing sIOP.\
\
This immediately leads to the definition of a design principle to its effect. We apply the normative notation from [@Greefhorst2011]:\
\
\\begin\{mmdp\}[Semantic heterogeneity between software agents is a feature to preserve *necessarily*]\\label\{dp:shf\}\
\
Although semantic homogeneity has got a useful position in sIOP, oppositely to semantic heterogeneity it should not be considered the primary point of departure.\
\
\\textbf\{Type of information:\} business, data  \\\\\
\\textbf\{Quality attributes:\} semantics, interoperability, reliability, reusability, efficiency   \\\\\
\\textbf\{Rationale:\}\
\\begin\{enumerate\}\
  \\item The user of the software agent has a natural, business controlled perspective on the DoA;\
  \\item Data represent the state of affairs about that DoA, viewed from a particular perspective of use;\
  \\item Such view is just one particular perspective out of many equally legitimate ones;\
  \\item Equally legitimate perspectives on reality naturally create semantic heterogeneity;\
  \\item Accepting semantic heterogeneity implies the probable uniqueness of the agents view on reality;\
  \\item Without adherence to this principle, sIOP can be achieved only for dedicated DC/DP pairs, with collaborations that have been foreseen, for which the semantics are assumed stable over time, implemented with technology or platforms for which no or limited evolution is anticipated, and assuming that new communication channels won\'92t emerge over time.\
\\end\{enumerate\}\
\\textbf\{Implications:\}\
\\begin\{enumerate\}\
  \\item Semantic heterogeneity maximises semantic clarity, accuracy and, consequently, the faithfull representation of the SoA in reality;\
  \\item Semantic heterogeneity allows for a development of the software agent independently from other, potentially collaborative software agents;\
  \\item A software agent needs to specify the semantics of its data elements only once whilst remaining prepared for any number of distinct communication peers;\
  \\item Semantic heterogeneity weakens the need to coordinate semantic specifications centrally; in stead, \'93anyone can say anything about any topic\'94, resulting in formalising the current state that semantic definitions are highly distributed;\
  \\item Maintenance and evolution of its semantics remain under the DP\'92s own control throughout the whole lifespan of the agent, and only depends on its business interest for investment, no matter the growth and evolution of the domain;\
  \\item Accepting semantic heterogeneity implies acceptance of semantic mediation and resulting semantic alignments in order to achieve sIOP.\
\\end\{enumerate\}  \
\\end\{mmdp\}\
\
>Note: We do not imply with this principle to abandon each and every use of semantic homogeneity. We consider shared semantic homogeneity a useful element to achieve sIOP. The principle encourages to not assume semantic homogeneity a necessary condition and pont of departure when engineering sIOP.\
\
It is clear that sIOP encompasses a communication between at least two agents. Communication between human agents brings a natural responsibility for both, described by [@Grice:1991BT] in four *maxims* as the particular purpose of communication. We consider these maxims as relevant for software agents as for human agents, viz. to serve:\
\
1. Quantity: Make your contributions as informative as is required (for the current purpose of the exchange), and not more than is required;\
2. Quality: Do not say what you believe to be false, or for which you lack evidence;\
3. Relation: Be relevant (to the immediate needs);\
4. Manner: Avoid obscurity of expression, ambiguity, and be brief and orderly.\
\
Since we here talk about *semantic* interoperability, we first need to establish what is meant with semantics in software. We argued in [@Brandt2021a] that since software is incapable of genuine understanding, semantics cannot exist in software. Nevertheless, the software agent acts as transport medium for semantics between users. We further stated that the reciprocity between processing code and data does manifest itself to users as software semantics. [@Grice:1991BT] discerns in semantics its *semantic meaning*, i.e., what is said and carried by data, and the *pragmatic meaning*, i.e., to connect with our frame of reference and its context of use, implementing comprehension as an inference process from the semantic meaning. We explained in [@Brandt2021a] that the nature of software dictates that data and data processing code are always intimately connected, and since their reciprocity emerges as software behaviour, software malfunction originates (amongst others) from a broken reciprocity, i.e., inconsistencies between data and their processing code. Any incoherent reciprocity equates to unfaithfulness, viz. semantics that are considered invalid in the application domain. We introduced the Domain Model (DM) that, composed as the combination of the Semantic model (SM), representing the semantic meaning, with the Pragmatic Model (PM), representing the pragmatic meaning, provides the software agent with the level of comprehension necessary to decide upon its behaviour under the current state of affairs. The consequence of the central disposition of reciprocity in software semantics is the emergence of what we denoted the *Atomic Semantic Monolith* (ASM): being a semantic monolith refers to the tight coupling of the reciprocity between data and their processing code which, together, describe the state of affairs in the application domain; Atomicity refers to the level of granularity at which the entity that is referred to by the data token is considered a non-dividable whole in the application domain. \
\
Based on this perspective on software semantics, we formulate the second (semantic) concern on sIOP and its elaboration in two subconcerns:\
\
* *concern 2*: It is a natural responsibility for software agents that engage in collaboration to adhere to Grice\'92s four maxims above\
  * *concern 2.1*: explicitly representing the semantics of their data in their DM (maxims 1 and 4);\
  * *concern 2.2*: ensuring the validity and accuracy of one\'92s data and related semantics (maxim 2).\
\
>Note: Maxim 3 relates at the one hand to the software agents\'92 interoperation itself as opposed to the semantic concern of one of them; this will be addressed in the next section. At the other hand, maxim 3 relates to the purpose that the software agent is to achieve. We assume that any received data refers to the (possibly changed) SoA in the shared DoA and, hence, is relevant to the software agent. Therefore, we consider no additional semantic concern to apply due to maxim 3.\
\
Concern 2.1 immediately leads to the definition of a design principle to its effect:\
\
\\begin\{mmdp\}[The responsibility for explicating the semantic meaning of data lays with the DP]\\label\{dp:rfsm\}\
\
When it is reasonable to expect that the software agent will be engaged in collaboration or otherwise will interoperate with (an)other software agent(s), it is the responsibility of the software architect to serve the quantity and manner of the potential interoperability by specifying its DM, and particularly the semantic meaning of its data, in advance. \
\
\\textbf\{Type of information:\} business, data  \\\\\
\\textbf\{Quality attributes:\} semantics, interoperability, usability, efficiency   \\\\\
\\textbf\{Rationale:\}\
\\begin\{enumerate\}\
  \\item Computers are not capable of genuine understanding, hence cannot establish semantics from data and thus require the human-in-the-loop for that;\
  \\item The user of the software agent has a natural, business controlled perspective on the DoA;\
  \\item This particular perspective is mirrored by the design of the software agent in the way how the entities of interest are carved out from the DoA. This includes the background knowledge that applies, the used terminology and how data from these entities are to be processed;\
  \\item Consequently, the responsibility for formulating the semantics that are expressed by the data can only lay by the DP;\
  \\item On specifying semantics, Grice\'92s maxims on communication, and particularly on serving the quantity and manner of communication, represent the natural constraints to respect;\
  \\item Without adherence to this principle, the meaning of the data expressed by the software agent can be considered flawed, inaccurate, incomplete or otherwise insufficient in its support for semantic interoperability.\
\\end\{enumerate\}\
\\textbf\{Implications:\}\
\\begin\{enumerate\}\
  \\item The specification of the data semantics is only dependent on the agent\'92s own perspective on the application domain, and can therefore be fulfilled without any specific demands on interoperability with other software agents;\
  \\item No matter the number of different communication peers, the software agent needs to have the semantics of its data elements specified only once;\
  \\item By providing an explicit semantic specification of the data in advance, a software agent is prepared to engage in sIOP with other agents that can now connect to its semantics;\
  \\item By establishing collaboration with other DPs or DCs through its DM, the software agent ensures that the communication is grounded in its own perspective.\
\\end\{enumerate\}  \
\\end\{mmdp\}\
\
Elaborating on concern 2.2: In [@Brandt2021a] we have identified that each modelling language carries its own ontological commitment, i.e., the differences that the language constructs characterise represent a commitment to what the language commits to about what exists in reality. The choice of modelling language, therefore, has major impact on the (accuracy of the) semantics that are modelled. This semantic concern is therefore influenced by the ontological commitment. We introduce a definition on *semantic compatibility* to its end. Merriam-Webster defines *compatibility* as \'93being a computer designed to operate in the same manner and use the same software as another computer\'94[^compatibility]. This leads to the following definition:\
\
\\begin\{mmdef\}[semantic compatibility]\\label\{def:semantic-compatibility\}\
*Semantic compatibility* reflects that a software agent is designed to interpretate data according to the same semantic principles, distinctions and rules, viz. use the same ontological commitment, as another software agent. \
\\end\{mmdef\}\
\
We defend that semantic compatibility is required to be able to assess the validity of the semantic meaning that is carried by data:\
\
\\begin\{mmdp\}[Semantic compatibility is a precursor to semantic interoperability]\\label\{dp:scp\}\
\
In order to consolidate semantic compatibility between collaborating software agents, both agents must confess to their ontological commitment underlying their domain models.\
\
\\textbf\{Type of information:\} business, data  \\\\\
\\textbf\{Quality attributes:\} semantics, accuracy, interoperability, usability   \\\\\
\\textbf\{Rationale:\}\
\\begin\{enumerate\}\
  \\item Following [@Grice:1991BT], it testifies to the manner of communication to avoid obscurity of expression and ambiguity;\
  \\item An ontological commitment represents a philosophical stance on fundamental categories and principles, which are foundational to semantics [@Brandt2021a, Sec.3.1];\
  \\item Each modelling language and, hence, every (semantic) model, carries an ontological commitment, at least implicitly;\
  \\item The semantic validity can be assessed only if the underlying ontological commitment can be referred to;\
  \\item Any assessment towards semantic interoperability of two semantic theories cannot be made without an assessment of the similarity between their underlying ontological commitments;\
  \\item The semantic meaning of data as specified by their SM are subordinate to the categorisation, scope and principles that the applied modelling language commits to; \
  \\item Semantic compatibility is a necessary condition for the emergence of sIOP; \
  \\item Without adherence to this principle, software agents will suffer from semantic incompatibility and therefore experience significant issues with their capability to establish sIOP in their communication with each other.\
\\end\{enumerate\}\
\\textbf\{Implications:\}\
\\begin\{enumerate\}\
  \\item Software agents that share the same ontological commitment will enjoy compatibility in the scope and nature of their semantics;\
  \\item Software agents that don\'92t share the same ontological commitment will know to take corrective actions to assure their semantic compatibility;\
  \\item By confessing to the ontological commitment underlying her domain model, a software agent realises the proper semantic environment to establish semantic interoperability with her.\
\\end\{enumerate\}  \
\\end\{mmdp\}\
\
Where it is the objective of semantics to maximise and maintain the coherence of the ASM, it is the objective of sIOP to address this monolithic nature of the ASM, as we do in the next section.\
\
\
<!-- page additions -->\
\
[^compatibility]: Merriam-Webster, https://www.merriam-webster.com/dictionary/compatibility, accessed Jan 2021\
}