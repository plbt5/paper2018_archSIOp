{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \'93The successful standardisation of protocols made us believe that we should also 
\f1 <$Scr_Cs::0>
\f2\i standardise meaning
\f1\i0 <!$Scr_Cs::0>
\f0  on the Web. This is a fundamental 
\f1 <$Scr_Cs::0>
\f2\i misconception
\f1\i0 <!$Scr_Cs::0>
\f0 .\'94 [@Janowicz:2013ui]. This believe can be witnessed by the many initiatives taken by standards developing organisations (SDO) to develop a myriad on data standards, from e.g., 
\f1 <$Scr_Cs::0>
\f2\i Tradelens
\f1\i0 <!$Scr_Cs::0>
\f0  in Transport & Logistics domain and 
\f1 <$Scr_Cs::0>
\f2\i International Financial Reporting Standards
\f1\i0 <!$Scr_Cs::0>
\f0  in Finance & Accounting to, e.g., 
\f1 <$Scr_Cs::0>
\f2\i ICEN/EN 13606
\f1\i0 <!$Scr_Cs::0>
\f0 , 
\f1 <$Scr_Cs::0>
\f2\i SO/TC 215
\f1\i0 <!$Scr_Cs::0>
\f0 , and 
\f1 <$Scr_Cs::0>
\f2\i ISO/HL7 21731
\f1\i0 <!$Scr_Cs::0>
\f0  in the Electronic Health Records domain and the 
\f1 <$Scr_Cs::0>
\f2\i smartM2M
\f1\i0 <!$Scr_Cs::0>
\f0  standard by the IoT European Platform Initiative [@ETSI2019], to name a few. This current viewpoint on semantics defies semantic heterogeneity and enforce semantic homogeneity: one single agreed domain convention on how the syntactic representation and structure of the data or messages shall be semantically interpreted. Indeed, semantics are a particular representation of some part of the world, viewed from a particular perspective of use, however, we don\'92t acknowledge that the 
\f1 <$Scr_Cs::0>
\f2\i particular
\f1\i0 <!$Scr_Cs::0>
\f0  representation and 
\f1 <$Scr_Cs::0>
\f2\i particular
\f1\i0 <!$Scr_Cs::0>
\f0  perspective that the data standard enforces is universally shared by the domain users. And equally important, any particular perspective is just one out of many equally legitimate ones that our software are deemed to consider over the software\'92s lifecycle. Some examples are given in \\cref\{tab:perspectives\}.\
\
-------------------------------------------------------------------------------------------------------------------\
Reality to refer to          Perspective #1      Perspective #2       Perspective #3        ...  Perspective #n              \
---------------------------- ------------------- -------------------- -------------------- ----- ------------------\
Waves are                    *objects* that      *forces* exerted on  an *accumulation* of  ...  a *relation*      \
                             I can point at      dikes, walls or      other waves                between water, \
                                                 oil rigs                                        current, wind and\
                                                                                                 the seabed\
\
$\\;$\
\
How many terrorist attacks   1, the number       2, the number        4, the number         ...  2996, the\
can be counted on 9/11?      of involved         of collapsed         of involved                number of\
                             terrorist groups    towers               aircraft                   casualties[^1] \
\
-------------------------------------------------------------------------------------------------------------------\
\
   : Semantics follow many alternative but equally legitimate points of view on reality, implying that no single one true abstraction exists. Hence, semantic heterogeneity is a feature that should be preserved, as opposed to a bug that should be sought to correct. \\label\{tab:perspectives\}\
\
We consider semantic homogeneity only a solution for small scale domains, i.e., with a handfull of actors, and for a short lifespan. For larger domains and/or longer lifespans, it is not only an illusion, but striving for homogeneity brings about several important disadvantages: (i) implementation of semantic standards involves considerable expenses, and tends to solidify in software by implicit operations on data that are expensive to change, slowly setting the standard in stone; (ii) since semantic standards fix representation, semantics become conflated with syntax, making the semantic standard susceptible to variations in syntax that occur with increasing stakeholders or with contextual evolution over time; (iii) conflating semantics and syntax create dependencies of the semantic standard with the architectural paradigm, its particular implementation or applied technology; (iv) the previous three issues bring about a high impedance for the standard to change and to evolve; and they create a significant barrier (v) for new business opportunities, (vi) obstructing business agility, and (vii) disable a level playing field for newcomers that have to invest hugely to adopt the standard and reap its benefits. Essentially, it is sheer impossible to create for each particular domain, or part thereof, a semantic standard; even in the highly protocolised health domain that already addressed semantics in 1987 [@Spronk2014], adoption of its standards remains slow and cumbersome [REF]. This becomes all the more clear when comparing with the successful adoption of 2G GSM telecommunication standard, including its evolution to 2.5G, 3G, 3.5G, 4G and 5G standards during roughly the same era. Finally, these issues only worsen when extending sIOP to support inter-domain interoperability.\
\
We formulate the first (semantic) concern on sIOP:\
\
* *concern 1*: Acknowledge semantic heterogeneity as point of departure when establishing sIOP.\
\
This immediately leads to the definition of \\cref\{dp:shf\} in \\cref\{tab:dps\} to its effect. We do not imply with this principle to abandon each and every use of semantic homogeneity. We consider shared semantic homogeneity a useful element to achieve sIOP. However, the principle encourages to not 
\f1 <$Scr_Cs::0>
\f2\i assume
\f1\i0 <!$Scr_Cs::0>
\f0  semantic homogeneity a necessary condition nor a point of departure when engineering sIOP.\
\
It is clear that sIOP encompasses a communication between at least two agents. Communication between human agents brings about a natural responsibility for both, described by [@Grice:1991BT] in four *maxims* as the particular purpose of communication. We consider these maxims as relevant for software agents as for human agents, viz to serve:\
\
1. Quantity: Make your contributions as informative as is required (for the current purpose of the exchange), and not more than is required;\
2. Quality: Do not say what you believe to be false, or for which you lack evidence;\
3. Relation: Be relevant (to the immediate needs);\
4. Manner: Avoid obscurity of expression, ambiguity, and be brief and orderly.\
\
Since we here talk about *semantic* interoperability, we first need to establish what is meant with semantics in software. With semantics, we refer to real world semantics, RWS for short, and we summarise our position towards semantics in software from [@Brandt2021a] as follows:\
\
* Since software is incapable of genuine understanding, real world semantics cannot exist in software. Nevertheless, the software agent acts as transport medium for RWS between users. \
* The reciprocity between processing code and data does manifest itself to users as RWS. \
* Based on [@Grice:1991BT], we discern *semantic meaning*, i.e., what is said and carried by data, and the *pragmatic meaning*, i.e., to connect with our frame of reference and its context of use, implementing comprehension as an inference process from the semantic meaning. \
* The nature of software dictates that data and data processing code are always intimately connected, and since their reciprocity emerges as software behaviour, software malfunction originates (amongst others) from a broken reciprocity, i.e., inconsistencies between data and their processing code. Any incoherent reciprocity equates to unfaithfulness, viz semantics that are considered invalid in the application domain. \
* The Domain Model (DM), composed as the combination of the Semantic model (SM), representing the semantic meaning, with the Pragmatic Model (PM), representing the pragmatic meaning, provides the software agent with the level of comprehension necessary to decide upon its behaviour under the current state of affairs. \
* The central disposition of reciprocity in software semantics emerges as an *Atomic Semantic Monolith* (ASM) required for data comprehension: being a 
\f1 <$Scr_Cs::0>
\f2\i semantic monolith
\f1\i0 <!$Scr_Cs::0>
\f0  refers to the tight coupling between data and their processing code, which, together, describe the state of affairs in the application domain; Atomicity refers to the level of granularity at which the entity that is referred to by the data token is considered a non-dividable whole in the application domain. \
\
Based on this perspective on software semantics, we formulate the second (semantic) concern on sIOP and its elaboration in two subconcerns:\
\
* *concern 2*: It is a natural responsibility for software agents that engage in collaboration to adhere to Grice\'92s four maxims above\
  * *concern 2.1*: explicitly representing the semantics of their data in their DM (maxims 1 and 4);\
  * *concern 2.2*: ensuring the validity and accuracy of one\'92s data and related semantics (maxim 2).\
\
>Note: Maxim 3 relates at the one hand to the software agents\'92 interoperation itself as opposed to the semantic concern of one of them; this will be addressed in \\cref\{spanning-siop-concerns\}. At the other hand, maxim 3 relates to the purpose that the software agent is to achieve. Since we assume that any received data refers to the (possibly changed) SoA in the shared DoA, hence, relevance to the software agent is a matter of fact. \
\
Concern 2.1 immediately leads to the definition of \\cref\{dp:rfsm\} to its effect.\
\
Elaborating on concern 2.2: In [@Brandt2021a] we have identified that each modelling language carries its own ontological commitment, i.e., the differences that the language constructs characterise represent a commitment to what the language commits to about what exists in reality. The choice of modelling language, therefore, has major impact on the (accuracy of the) semantics that are modelled. This semantic concern is therefore influenced by the ontological commitment. We introduce a definition on *semantic compatibility* to its end. Merriam-Webster defines *compatibility* as \'93being a computer designed to operate in the same manner and use the same software as another computer\'94[^compatibility]. This leads to the following definition:\
\
\\begin\{mmdef\}[semantic compatibility]\\label\{def:semantic-compatibility\}\
Semantic compatibility reflects that a software agent is designed to interpretate data according to the same semantic principles, distinctions and rules, viz use the same ontological commitment, as another software agent. \
\\end\{mmdef\}\
\
We formulate \\cref\{dp:scp\} in order to defend that it should be possible to investigate whether semantic compatibility exists before assessing the validity and applicability of the semantic meaning that is carried by data.\
\
Where it is the objective of semantics to maximise and maintain the coherence of the ASM, it is the objective of sIOP to address this monolithic nature of the ASM, as we do in the next section.\
\
\
<!-- page additions -->\
\
[^compatibility]: Merriam-Webster, https://www.merriam-webster.com/dictionary/compatibility, accessed Jan 2021\
}