{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 With semantics, we refer to real world semantics (RWS) and we summarise {\field{\*\fldinst{HYPERLINK "scrivcmt://46EDB602-69E3-476F-A69D-2DF8D62D9619"}}{\fldrslt our position towards semantics in software from [@Brandt2021a]}} as follows:\
\
* Since software is incapable of genuine understanding, RWS cannot exist in software. Nevertheless, the software agent acts as transport medium for RWS between users and must do so without compromising the transported cargo, viz RWS. \
* Based on [@Grice:1991BT], we discern *semantic meaning*, i.e., what is said and carried by data, and *pragmatic meaning*, i.e., to connect with our frame of reference and its context of use, implementing comprehension as an inference process from the semantic meaning. \
* We consider *data* the carrier for semantic meaning, and their *data processing* carrier for pragmatic meaning. \
* The nature of software dictates that data and their data processing are always intimately connected. We consider the 
\f1 <$Scr_Cs::0>
\f2\i reciprocity
\f1\i0 <!$Scr_Cs::0>
\f0  between data (semantic meaning) and their processing (pragmatic meaning) the carrier of RWS.\
* Any incoherent reciprocity, i.e., inconsistencies between data and their processing code, equates to unfaithfulness to reality, viz semantics that are considered invalid by the current SoA in the application domain.\
* The central disposition of reciprocity in software semantics emerges as an *Atomic Semantic Monolith* (ASM), established with the explicit purpose to guarantee the coherence between the data (semantic meaning) and their processing code (pragmatic meaning) required to achieve data comprehension. \
* The Domain Model (DM), composed as the combination of the Semantic model (representing all semantic meanings) with the Pragmatic Model (representing all pragmatic meanings), provides the software agent with the level of comprehension necessary to decide upon its behaviour (to achieve the agent\'92s objectives) under the current state of affairs. \
* In the active, processing, part of an agent, we thus separate comprehension, specified by the DM, from achievement, specified by the System Model (SM). The resulting simple software model emerges as \\textsf\{\\textbf\{\\small Input\\ensuremath\{\\twoheadrightarrow\}\\colorbox\{gray!30\}\{Comprehension\}\}\}\\stackedcondtext\{Achievement 2\}\{Achievement 1\}\\textsf\{\\textbf\{\\small Output\}\}, where \\textsf\{\\colorbox\{gray!30\}\{\\small shaded\}\} represents behaviour, \\textsf\{\\small non-shaded\} represents static structures and \\textsf\{\\textbf\{\\small bold\}\} represents semantics. We consider the SM semantically grounded in the DM if all terms that are used by the SM and refer to the DoA, get their comprehension from the DM.}