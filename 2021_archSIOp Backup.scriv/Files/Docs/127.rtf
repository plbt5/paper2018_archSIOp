{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 Courier New;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 **Construct overload**, also known as *ontological overload* [@Wand:1993dX], occurs when a single language construct is used to represent two or more domain concepts. A language `L` is **lucid** w.r.t. to a domain `D` iff every modeling primitive in the language represents at most one domain concept in `O` [@Guizzardi:2005tn]. Although construct overload and non-lucid representation seem very similar, these notions albeit related are not identical, as is shown in [@Guizzardi:2005tn, fig. 3]. The absence of construct overload does not directly prevent the construction of non-lucid representations in this language. Additionally, construct overload does not entail non-lucidity. }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Construct overload is an undesirable property of a modeling language since it causes ambiguity and, hence, undermines clarity. When a construct overload exists, users have to bring additional knowledge not contained in the model to understand which phenomena is being represented. Additionally, a non-lucid representation language allows for ambiguous or obscure interpretations. }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}