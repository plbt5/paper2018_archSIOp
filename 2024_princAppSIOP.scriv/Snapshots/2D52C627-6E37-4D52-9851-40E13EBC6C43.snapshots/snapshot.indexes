<?xml version="1.0" encoding="UTF-8"?>
<SnapshotIndexes Version="1.0" BinderUUID="2D52C627-6E37-4D52-9851-40E13EBC6C43">
    <Snapshot Date="2018-05-23 23:35:38 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>
*Background:* Access-and-Play SIOp is the next glass ceiling in [interoperability/IT-based business collaboration]. We can think of two approaches to break through the ceiling, i.e., using either strong AI (a system that can *think* and has a *mind*, in the philosophical definition of the term) or weak AI (a system that can only *act* like it thinks and has a mind [@Searle:1980hw]). Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore.  
*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 
*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]
*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include a semantic mediation capability. 
*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   
</Text>
    </Snapshot>
    <Snapshot Date="2018-06-11 13:15:09 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>*Background:* Access-and-Play SIOp is the next glass ceiling in [interoperability/IT-based business collaboration]. We can think of two approaches to break through the ceiling, i.e., using either strong AI (a system that can *think* and has a *mind*, in the philosophical definition of the term) or weak AI (a system that can only *act* like it thinks and has a mind [@Searle:1980hw]). Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore. 
 
*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 

*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]

*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include a semantic mediation capability. 

*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   
</Text>
    </Snapshot>
    <Snapshot Date="2023-10-16 21:45:10 +0200">
        <Title>Pre-Sync Roemer Word review</Title>
        <Text>  *Background:* Absence of access-and-play semantic interoperability (sIOP) is a big hurdle to contemporary IT-based business collaboration. Despite achievements on sIOP, standardising domain semantics experiences challenges in time-to-market, evolution, and scalability in environments where significant semantic variety exists. Progress towards a universal infrastructural support for sIOP remains hampered by solutions that focus on the local domain only. Real-world semantics in software are necessarily reduced to the reciprocity between data and data processing. Data exchange breaks that reciprocity, failing sIOP. sIOP demands re-establishing a valid reciprocity between the consumer agent’s data processing and the producer agent’s data, without dependency on semantic standards. For access-and-play sIOP, the effort of the human in the loop has to be reduced. This is a matter of software architecture.       
  
  *Objective:* The objective of our study is to identify and formulate the fundamental demands on sIOP, to derive its supporting architectural principles, and their embedding in contemporary architectures.    
  
  *Method:* We assess the problems and identify requirements on sIOP, two of which demanding a human in the loop. We develop design principles for interoperability between the agents’ semantics. We evaluate these principles by designing an ISO-42010 Architecture Viewpoint and View on sIOP.   
  
  *Results:* We show that loosely coupled semantics, semantic alignments, and accountability about the applied ontological commitment are the cornerstones to sIOP. The supporting principles are: taking responsibility for your data semantics; an explicit ontological commitment; separating semantics from communication; aligning internal and external semantics of exchanged data; and, encapsulating how agents exchange semantics. The resulting Architecture Viewpoint and View on sIOP, including semantic mediation, consolidates sIOP in contemporary architectural paradigms.  
  
  *Conclusions:* Our principles address architectural shortcomings for an access-and-play sIOP capability. Conditions supporting sIOP have to be realised in advance of the data exchange, resulting in loosely coupled semantics that are re-usable for different business collaborations, even those that are not anticipated for. This paper intends to support research into domain-independent standardised semantic services and APIs, to be adopted and embedded into the communication infrastructure between software agents.   </Text>
        <Comments>Depends on contribution Eric
When paper has been reviewed completely, adapt the part about reciprocity to make it understandable without that term, or explain the term.
Check when done with paper</Comments>
    </Snapshot>
    <Snapshot Date="2023-11-30 17:13:52 +0100">
        <Title>Versie 2.0-1 nav commentaar Twan dd 20231117</Title>
        <Text>  Collaboration among business stakeholders occurs within chains and networks that are considerably more dynamic than in the past. Parties come and go depending on opportunities and threats in their domain of application. Additionally, communication essential for collaboration is increasingly shifting from the physical to the digital domain. This necessitates solutions for dynamic semantic interoperability (sIOP) within the digital realm.
  
  Dynamic sIOP is a variation of sIOP that addresses semantically heterogeneous environments without the need for upfront sharing of common semantics or knowledge of participating stakeholders. In the field of ICT, the primary challenge is to effectively reconcile, in (near) real-time, the differences in real-world semantics (RWS) referred to by various applications. Since software systems are unable to genuinely understand RWS, bridging semantic heterogeneity requires a human-in-the-loop. Also, any solution towards that bridge should not be invented locally and reinvented again and again, but rather is common functionality that can and should become available as infrastructural services. Our research aims to enhance both application and infrastructure by introducing a dynamic sIOP capability, whilst minimising the human-in-the-loop to the bare essentials.  
  
  Our approach is to identify the essential functional concerns for such dynamic sIOP capability, and to devise design principles (DPs) to their resolution. We operationalise these DPs by showing that their joint implementation results in infrastructural services that are agnostic towards the specific RWS of the application domain while enabling applications to communicate and come to an agreement about domain semantics.  
  
  The benefits of such dynamic sIOP capability over existing solutions towards sIOP lie in software applications’ ability to converse about the domain semantics in real time whenever the need arises, rather than being constrained to communicate over a fixed set of semantics only. This is a direct result of separating the semantic concerns from the communication concerns, lifting the semantic representation from the communication syntax. And, by remaining agnostic to domain semantics and solely applying generic (infrastructural) services, this approach allows for a standardisation initiative on top of any communication infrastructure. This also removes the differentiation between inter- and intra-domain sIOP; for arbitrary applications to be eligible to engage in collaboration, they need only share a specific part of reality.  
  </Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 23:39:14 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>

*Background:* Access-and-Play SIOp is the next glass ceiling in [interoperability/IT-based business collaboration]. We can think of two approaches to break through the ceiling, i.e., using either strong AI (a system that can *think* and has a *mind*, in the philosophical definition of the term) or weak AI (a system that can only *act* like it thinks and has a mind [@Searle:1980hw]). Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore.  

*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 

*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]

*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include a semantic mediation capability. 

*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   

</Text>
    </Snapshot>
    <Snapshot Date="2018-05-23 23:28:59 +0200">
        <Title>Pre-External File Sync Overwrite</Title>
        <Text>
*Background:* Access-and-Play SIOp is the next glass ceiling in [interoperability/IT-based business collaboration]. We can think of two approaches to break through the ceiling, i.e., using either strong AI (a system that can *think* and has a *mind*, in the philosophical definition of the term) or weak AI (a system that can only *act* like it thinks and has a mind [@Searle:1980hw]). Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore.  
*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 
*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]
*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include a semantic mediation capability. 
*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   

</Text>
    </Snapshot>
    <Snapshot Date="2018-05-22 23:13:21 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>
*Background:* Access-and-Play SIOp is the next glass ceiling in ICT. We can think of two approaches to break through the ceiling, i.e., using either strong AI or weak AI. Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore.  
*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 
*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]
*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include an alignment-based semantic mediation capability. 
*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   
Keywords: uhuhuh
</Text>
    </Snapshot>
    <Snapshot Date="2023-11-16 17:51:29 +0100">
        <Title>Naar versie 2</Title>
        <Text>Fast and effective business collaboration benefits from semantic interoperability (sIOP). Dynamic sIOP is a dynamically scalable, infrastructure-supported form of sIOP targeting dynamic, semantically heterogeneous environments. Moreover, dynamic sIOP responds to the trend on data-driven operations and collaboration, enabling an access-and-play semantic deciphering of external data sources. The challenge to overcome in the ICT discipline is to bridge the differences in real world semantics (RWS) that exist between applications. Since software systems are still unable to genuinely understand RWS, homogenising such semantic heterogeneity requires intervention of the human brain. Dynamic sIOP requires a subsequent adaption of the software application accordingly, and/or an extension of the communication infrastructure. Our investigation is targeted at the latter, viz extending the infrastructure with a dynamic sIOP capability, and minimising the human-in-the-loop as well as the design time for adapting the software. Our approach is to identify the essential (extra-)functional concerns for the dynamic sIOP capability, and to establish design principles (DPs) to their resolution. We operationalise these DPs by showing that their collective application leads to infrastructural services at the one hand, and communication specific components at the other, both being generic to the particular RWS of the application domain. Additionally, the RWS of the domain remain as an explicit and reusable artefact that is specific to and governed by the enterprise and loosely-coupled with its applications. The benefits of our dynamic sIOP architecture and our contribution to the body of knowledge about the semantic (web) technology is a capability of software applications to converse about the domain semantics in real time, as opposed to standardise domain semantics upfront in fixed data communication syntaxes. The characteristics of dynamic sIOP enables an ad-hoc and scalable access-and-play capability between arbitrary applications, paving the way towards fast and effective business collaborations.</Text>
    </Snapshot>
    <Snapshot Date="2018-05-14 13:06:14 +0200">
        <Title>Pre-Sync External File Version</Title>
        <Text>
*Background:* Access-and-Play SIOp is the next glass ceiling in ICT. We can think of two approaches to break through the ceiling, i.e., using either strong AI or weak AI. Strong AI is not yet available, while weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms. Current approaches towards SIOp can be considered accepted folklore.  
*Objective:* The objective of this study is to identify and define the fundamental guidance towards access-and-play semantic interoperability in contemporary architectural paradigms. 
*Method:* Our approach is based on the discipline of semiotics. After identifying semiotic shortcomings in MDA and view-based architectural paradigms and their subsequent definition as missing concerns, we develop the necessary guiding architectural principles. We finally investigate their consolidation in view-based and model-driven architectural paradigms. [We evaluate these principles by designing a reference architecture and proof its use in SIOp between two software agents.]
*Results:* The semiotic approach/discipline demonstrates/proves semantics to be the result of a reciprocity between data and the software code that operates on them. The major shortcomings in architectural paradigms to account for semantic interoperability are their negligence of semiotic fundamentals and, particularly, the absence of an explicit ontological commitment that stands at the root of semantics. Therefore, the concern about a semantic loose coupling should be added to the architectural paradigms. The supporting principles are (i) semantic transparency, (ii) semantic separation of concerns, and (iii) explicit computational semantics. In view-based architectures their consolidation implies a new semantic view, while the MDA paradigm requires an ontological commitment on M3. Both paradigms need to include an alignment-based semantic mediation capability. 
*Conclusions:* Access-and-play SIOp can be achieved when considering semiotic fundamentals and adding loosely coupled semantics to contemporary architectural paradigms.   
Keywords: uhuhuh
</Text>
    </Snapshot>
</SnapshotIndexes>